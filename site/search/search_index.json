{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"dConstruct d.ASH SDK The dConstruct d.ASH SDK is an SDK (software development kit) for autonomous robot navigation. Use the d.ASH SDK to develop applications for your own Spot from Boston Dynamics or any other robot you wish. This section of the d.ASH SDK documentation provides details about the components of the SDK. Autonomy Preparation There are 3 main components encompassing the d.ASH SDK: d.ASH Server ROS Driver d.ASH Autonomy Controller If you decide to use your own custom GUI in place of the d.ASH Autonomy Controller , or you do not want to run autonomy, you will still need to implement the d.ASH Server and the ROS Driver to operate your robot. d.ASH Server The d.ASH server acts as the main server responsible for sending control commands to the robot. At the same time, the d.ASH server also broadcasts secured data to any given remote systems. ROS Driver The ROS driver is a ROS node that has autonomy functions onboard to make your robot accessible from ROS. The ROS driver handles computational calls from any client and sends control commands to the d.ASH server. In turn, the d.ASH server relays the autonomy commands to the robot for execution. d.ASH Autonomy Controller The d.ASH autonomy controller is the GUI (graphical user interface) for the d.ASH SDK. It encompasses the interactive visual components for d.ASH's software and displays different elements for users to interact with to control your robot.","title":"Introduction"},{"location":"#dconstruct-dash-sdk","text":"The dConstruct d.ASH SDK is an SDK (software development kit) for autonomous robot navigation. Use the d.ASH SDK to develop applications for your own Spot from Boston Dynamics or any other robot you wish. This section of the d.ASH SDK documentation provides details about the components of the SDK.","title":"dConstruct d.ASH SDK"},{"location":"#autonomy-preparation","text":"There are 3 main components encompassing the d.ASH SDK: d.ASH Server ROS Driver d.ASH Autonomy Controller If you decide to use your own custom GUI in place of the d.ASH Autonomy Controller , or you do not want to run autonomy, you will still need to implement the d.ASH Server and the ROS Driver to operate your robot.","title":"Autonomy Preparation"},{"location":"#dash-server","text":"The d.ASH server acts as the main server responsible for sending control commands to the robot. At the same time, the d.ASH server also broadcasts secured data to any given remote systems.","title":"d.ASH Server"},{"location":"#ros-driver","text":"The ROS driver is a ROS node that has autonomy functions onboard to make your robot accessible from ROS. The ROS driver handles computational calls from any client and sends control commands to the d.ASH server. In turn, the d.ASH server relays the autonomy commands to the robot for execution.","title":"ROS Driver"},{"location":"#dash-autonomy-controller","text":"The d.ASH autonomy controller is the GUI (graphical user interface) for the d.ASH SDK. It encompasses the interactive visual components for d.ASH's software and displays different elements for users to interact with to control your robot.","title":"d.ASH Autonomy Controller"},{"location":"getting-started/UE-client/","text":"d.ASH Autonomy Controller As mentioned previously, the d.ASH autonomy controller is the GUI (graphical user interface) for the d.ASH SDK. It encompasses the interactive visual components for d.ASH's software and displays different elements for users to interact with to control your robot. This section of the d.ASH SDK documentation provides details about setting up the d.ASH autonomy controller, including information on its respective components. Main Components Main toolbar : Used to open other menus. Slider : Used to move floor grid up and down. Access mode : Used switch to mouse/keyboard mode. Navigation : The default mode uses the keys WASD to move camera and right click the mouse to zoom/tilt the camera. Waypoint creation : Used for adding waypoints to routes. Floor grid Login The login icon allow dConstruct users to log into the d.ASH autonomy controller using their cloud admin credentials. Robot Connection The robot connection icon allow users to connect/disconnect their respective robots to the d.ASH autonomy controller. Online pannel : Select from a list of robots that are online and ready to be used to connect to. Connected pannel : Select from a list of robots that you have connected to in the client to manipulate. Add button : Press to connect to the robot selected in the online list to add the robot to the connected list. Minus button : Press to disconnect from a robot in the connected list. When users first start the d.ASH SDK, they need to give an initial estimation of the robot's post on the map by configuring its init pose . It tells the robot where its rough initial position is. To initialize init pose , draw the orange arrow by left clicking and drag the mouse on the floor grid. Routes The routes icon allow users to set routes for the robot to follow using waypoints. Add/remove waypoints to build your own custom routes. Route Controls Route name pannel : Enter route name to add. Add button : Click to add route of given name. Route selection pannel : Click to select a route. Minus button : Click to remove selected route. Waypoint button : Click to add waypoints to selected route. Load/save button : Load/save all routes. Segment pannel : Use keypad \u00b1 to increment/decrement segment number. Setting Up Routes To make a selected robot follow a selected route, add waypoints by clicking on the grid. Use WASD and right-click on the mouse to manipulate the view. Once the waypoints have been set, exit waypoint mode by middle clicking the mouse. On the other hand, to remove a waypoint, click on the waypoint (selected waypoint change to the color orange), and press the delete ket to remove. You can also adjust the elevation of the grid by pressing the key ctrl and the mouse scroll moving the floor grid in waypoint mode. A waypoint is created when you click on grid, so, to create elevated waypoints, move grid up/down and then click. Map Settings The map settings icon allow users to adjust highpass, lowpass, UV Scale, and UV offset settings to customise the visuals of your map. Low pass slider : Voxels below this value is visible. Voxels in maps have elevation, and by lowering the low pass, voxels above the low pass will be cropped. Notice that the ceiling voxels have now been cropped by reducing the low pass. Layer Visibility The layer visibility icon allow users to toggle the visibility of various items on the map. Load Scans The load scans icon allow users to preview scans from the d.ASH Pack. Vox downsample size pannel : Select your down sample size (in metres). A large value means lower quality, but faster loading. Point clouds button : Pick loaded point clouds to toggle translucency. Load scans in translucent mode.","title":"d.ASH Autonomy Controller"},{"location":"getting-started/UE-client/#dash-autonomy-controller","text":"As mentioned previously, the d.ASH autonomy controller is the GUI (graphical user interface) for the d.ASH SDK. It encompasses the interactive visual components for d.ASH's software and displays different elements for users to interact with to control your robot. This section of the d.ASH SDK documentation provides details about setting up the d.ASH autonomy controller, including information on its respective components.","title":"d.ASH Autonomy Controller"},{"location":"getting-started/UE-client/#main-components","text":"Main toolbar : Used to open other menus. Slider : Used to move floor grid up and down. Access mode : Used switch to mouse/keyboard mode. Navigation : The default mode uses the keys WASD to move camera and right click the mouse to zoom/tilt the camera. Waypoint creation : Used for adding waypoints to routes. Floor grid","title":"Main Components"},{"location":"getting-started/UE-client/#login","text":"The login icon allow dConstruct users to log into the d.ASH autonomy controller using their cloud admin credentials.","title":"Login"},{"location":"getting-started/UE-client/#robot-connection","text":"The robot connection icon allow users to connect/disconnect their respective robots to the d.ASH autonomy controller. Online pannel : Select from a list of robots that are online and ready to be used to connect to. Connected pannel : Select from a list of robots that you have connected to in the client to manipulate. Add button : Press to connect to the robot selected in the online list to add the robot to the connected list. Minus button : Press to disconnect from a robot in the connected list. When users first start the d.ASH SDK, they need to give an initial estimation of the robot's post on the map by configuring its init pose . It tells the robot where its rough initial position is. To initialize init pose , draw the orange arrow by left clicking and drag the mouse on the floor grid.","title":"Robot Connection"},{"location":"getting-started/UE-client/#routes","text":"The routes icon allow users to set routes for the robot to follow using waypoints. Add/remove waypoints to build your own custom routes.","title":"Routes"},{"location":"getting-started/UE-client/#route-controls","text":"Route name pannel : Enter route name to add. Add button : Click to add route of given name. Route selection pannel : Click to select a route. Minus button : Click to remove selected route. Waypoint button : Click to add waypoints to selected route. Load/save button : Load/save all routes. Segment pannel : Use keypad \u00b1 to increment/decrement segment number.","title":"Route Controls"},{"location":"getting-started/UE-client/#setting-up-routes","text":"To make a selected robot follow a selected route, add waypoints by clicking on the grid. Use WASD and right-click on the mouse to manipulate the view. Once the waypoints have been set, exit waypoint mode by middle clicking the mouse. On the other hand, to remove a waypoint, click on the waypoint (selected waypoint change to the color orange), and press the delete ket to remove. You can also adjust the elevation of the grid by pressing the key ctrl and the mouse scroll moving the floor grid in waypoint mode. A waypoint is created when you click on grid, so, to create elevated waypoints, move grid up/down and then click.","title":"Setting Up Routes"},{"location":"getting-started/UE-client/#map-settings","text":"The map settings icon allow users to adjust highpass, lowpass, UV Scale, and UV offset settings to customise the visuals of your map. Low pass slider : Voxels below this value is visible. Voxels in maps have elevation, and by lowering the low pass, voxels above the low pass will be cropped. Notice that the ceiling voxels have now been cropped by reducing the low pass.","title":"Map Settings"},{"location":"getting-started/UE-client/#layer-visibility","text":"The layer visibility icon allow users to toggle the visibility of various items on the map.","title":"Layer Visibility"},{"location":"getting-started/UE-client/#load-scans","text":"The load scans icon allow users to preview scans from the d.ASH Pack. Vox downsample size pannel : Select your down sample size (in metres). A large value means lower quality, but faster loading. Point clouds button : Pick loaded point clouds to toggle translucency. Load scans in translucent mode.","title":"Load Scans"},{"location":"getting-started/config-connect/","text":"Configuring Sensors 2.1 Velodyne Driver The Velodyne Driver is a driver in the ROS package that provides basic device handling for Velodyne 3D LIDAR sensors. For more info, refer to this (insert link on how to set up) 2.1.1 Setting Up on Sensor By default, the Velodyne LIDAR sensor IP address is factory set on default value 192.168.1.201 . The d.ASH SDK will assume the default Velodyne IP address. 2.1.2 Setting Up on Personal Computer You'll need to configure a static IP address for your computer to use an address within the range 192.168.1.XXX where XXX may be any integer from 2 to 254, except 201 (which is the LIDAR\u2019s IP). For example, an appropriate static IP address for your compute could be 192.168.1.100 . 2.2 Ouster Driver 2.2.1 Setting Up on Sensor By default, the Ouster LIDAR sensor IP address is factory set on your IPv6/IPv4 link-local address. The addresses lie within the block 169.254.0.0 to 169.254.255.255 . To change the static IP address for Ouster, refer to the Ouster Documentation . It is recommended to set up your own static IP address. 2.2.2 Setting Up on Personal Computer You'll need to configure a static IP address for your computer to use an address within the range 192.0.2.XXX where XXX may be any integer from 2 to 254. For example, an appropriate static IP address for your compute could be 192.0.2.123 . User need to go into dash_sdk/ROS_Drivers folder and cd ~/dash_SDK/ROS_Drivers/ catkin_make #compiles the whole thing echo \"source /home/<User>/dash_SDK/ROS_Drivers/devel/setup.bash\" >> ~/.bashrc source ~/.bashrc Testing lidar sensors velodine 16 cd dash_sdk/launch roslaunch autonomy_velodine.launch Ouster 32 cd dash_sdk/launch roslaunch autonomy_ouster.launch to check if the ros messages is published correctly, type this in another terminal rostopic echo /velodyne_points","title":"2.0 Configuring Sensors"},{"location":"getting-started/config-connect/#configuring-sensors","text":"","title":"Configuring Sensors"},{"location":"getting-started/config-connect/#21-velodyne-driver","text":"The Velodyne Driver is a driver in the ROS package that provides basic device handling for Velodyne 3D LIDAR sensors. For more info, refer to this (insert link on how to set up)","title":"2.1 Velodyne Driver"},{"location":"getting-started/config-connect/#211-setting-up-on-sensor","text":"By default, the Velodyne LIDAR sensor IP address is factory set on default value 192.168.1.201 . The d.ASH SDK will assume the default Velodyne IP address.","title":"2.1.1 Setting Up on Sensor"},{"location":"getting-started/config-connect/#212-setting-up-on-personal-computer","text":"You'll need to configure a static IP address for your computer to use an address within the range 192.168.1.XXX where XXX may be any integer from 2 to 254, except 201 (which is the LIDAR\u2019s IP). For example, an appropriate static IP address for your compute could be 192.168.1.100 .","title":"2.1.2 Setting Up on Personal Computer"},{"location":"getting-started/config-connect/#22-ouster-driver","text":"","title":"2.2 Ouster Driver"},{"location":"getting-started/config-connect/#221-setting-up-on-sensor","text":"By default, the Ouster LIDAR sensor IP address is factory set on your IPv6/IPv4 link-local address. The addresses lie within the block 169.254.0.0 to 169.254.255.255 . To change the static IP address for Ouster, refer to the Ouster Documentation . It is recommended to set up your own static IP address.","title":"2.2.1 Setting Up on Sensor"},{"location":"getting-started/config-connect/#222-setting-up-on-personal-computer","text":"You'll need to configure a static IP address for your computer to use an address within the range 192.0.2.XXX where XXX may be any integer from 2 to 254. For example, an appropriate static IP address for your compute could be 192.0.2.123 . User need to go into dash_sdk/ROS_Drivers folder and cd ~/dash_SDK/ROS_Drivers/ catkin_make #compiles the whole thing echo \"source /home/<User>/dash_SDK/ROS_Drivers/devel/setup.bash\" >> ~/.bashrc source ~/.bashrc Testing lidar sensors velodine 16 cd dash_sdk/launch roslaunch autonomy_velodine.launch Ouster 32 cd dash_sdk/launch roslaunch autonomy_ouster.launch to check if the ros messages is published correctly, type this in another terminal rostopic echo /velodyne_points","title":"2.2.2 Setting Up on Personal Computer"},{"location":"getting-started/config-spot/","text":"Configuring Spot To configure Spot, you will need to set up on the robot itself and on your personal computer. For further enquiries of setting up Spot, follow Boston Dynamics Documentation . 1.1 Setting Up On Spot By default, user and admin credentials are printed on a label in the robot's battery compartment. Otherwise, you can create your own account through the admin console by creating a user with admin privileges. Remember your credentials! Remember your Spot credentials as you will need those same credentials to set up the next section on your personal computer. 1.2 Setting Up On PC By default, the Spot robot IP address is 10.0.0.3 . If you have more than one Spot robot, refer to the Boston Dynamics Documentation to use the admin console to change the default IP of additional robots to avoid address conflicts. You'll need to configure a static IP address for your computer to use an address within the range 10.0.0.X where X may be any integer from 2 to 254, except 3 (which is the Spot's IP). For example, an appropriate static IP address for your compute could be 10.0.0.100 . You will then be asked to enter a valid admin or operator username and password.","title":"1.0 Configuring Spot"},{"location":"getting-started/config-spot/#configuring-spot","text":"To configure Spot, you will need to set up on the robot itself and on your personal computer. For further enquiries of setting up Spot, follow Boston Dynamics Documentation .","title":"Configuring Spot"},{"location":"getting-started/config-spot/#11-setting-up-on-spot","text":"By default, user and admin credentials are printed on a label in the robot's battery compartment. Otherwise, you can create your own account through the admin console by creating a user with admin privileges. Remember your credentials! Remember your Spot credentials as you will need those same credentials to set up the next section on your personal computer.","title":"1.1 Setting Up On Spot"},{"location":"getting-started/config-spot/#12-setting-up-on-pc","text":"By default, the Spot robot IP address is 10.0.0.3 . If you have more than one Spot robot, refer to the Boston Dynamics Documentation to use the admin console to change the default IP of additional robots to avoid address conflicts. You'll need to configure a static IP address for your computer to use an address within the range 10.0.0.X where X may be any integer from 2 to 254, except 3 (which is the Spot's IP). For example, an appropriate static IP address for your compute could be 10.0.0.100 . You will then be asked to enter a valid admin or operator username and password.","title":"1.2 Setting Up On PC"},{"location":"getting-started/localization/","text":"Localization When you first start the d.ASH SDK, you need to give an initial estimation of the robot's post on the map. To do so, use the UE client to send the initial post. (more info can be found in the UE client guide)","title":"Localization"},{"location":"getting-started/localization/#localization","text":"When you first start the d.ASH SDK, you need to give an initial estimation of the robot's post on the map. To do so, use the UE client to send the initial post. (more info can be found in the UE client guide)","title":"Localization"},{"location":"getting-started/map-loading/","text":"Map Loading This section of the d.ASH SDK documentation provides details about file organisation of autonomy maps for the d.ASH SDK. To load a new map, upload the autonomy map files in the following location: ~/.data/maps/<MAP_NAME> For example, if your map is outdoor_map.pcd , ~/.data/maps/outdoor_map Within that folder, ensure the following files are in the folder: 2D Autonomy Map: <MAP_NAME>.png 3D Autonomy Map: <MAP_NAME>.pcd Global Planner Configuration: <MAP_NAME>.json To activate the new map, ensure the map name in autoConfig.json file matches . \"map_name\": \"outdoor_map\",","title":"3.0 Map Loading"},{"location":"getting-started/map-loading/#map-loading","text":"This section of the d.ASH SDK documentation provides details about file organisation of autonomy maps for the d.ASH SDK. To load a new map, upload the autonomy map files in the following location: ~/.data/maps/<MAP_NAME> For example, if your map is outdoor_map.pcd , ~/.data/maps/outdoor_map Within that folder, ensure the following files are in the folder: 2D Autonomy Map: <MAP_NAME>.png 3D Autonomy Map: <MAP_NAME>.pcd Global Planner Configuration: <MAP_NAME>.json To activate the new map, ensure the map name in autoConfig.json file matches . \"map_name\": \"outdoor_map\",","title":"Map Loading"},{"location":"getting-started/waypoint/","text":"Waypoint and Recoding Data is sent using the UE client. 1) More info refer to UE client guide 2) Another method is to write your own code by subscribing to the topic (krittin to give topic name) (we accept data in following format\u2026) nav_msgs/Path","title":"Waypoint and Recoding"},{"location":"getting-started/waypoint/#waypoint-and-recoding","text":"Data is sent using the UE client. 1) More info refer to UE client guide 2) Another method is to write your own code by subscribing to the topic (krittin to give topic name) (we accept data in following format\u2026) nav_msgs/Path","title":"Waypoint and Recoding"},{"location":"sdk-config/auto-config/","text":"Auto Configuration This section of the d.ASH SDK documentation provides details about the configuration file for the robot autoConfig.json . Information in this section includes variable and definitions to configure autonomy. 3.1 Config File { \"py_address\" : \"0.0.0.0:50051\" , \"ue_address\" : \"0.0.0.0:50052\" , \"ssl\" : true , \"motion_planner\" : true , \"localization\" : true , \"sim_mode\" : false , \"send_data_gui\" : true , \"camera\" : \"RealsenseCam\" , \"retrieveImg\" : false , \"map_name\" : \"office_lvl4\" , \"pc_topic\" : \"velodyne_points\" , \"odom_topic\" : \"odom\" , \"controller\" :{ \"linear_window\" : 0.5 , \"linear_min_v\" : 0.0 , \"linear_max_v\" : 0.8 , \"angular_max_w\" : 3.142 , \"linear_max_a\" : 1.0 , \"angular_max_a\" : 5.0 , \"robot_width\" : 0.4 , \"robot_length\" : 1.0 , \"obstacle_cost_gains\" : 3.0 , \"speed_cost_gains\" : 1.0 , \"goal_cost_gains\" : 4.0 , \"angular_speed_cost_scaling_factor\" : 0.1 , \"linear_num_window_steps\" : 50 , \"angular_num_window_steps\" : 30 , \"prediction_window\" : 5.0 , \"costmap_size\" : 20.0 , \"costmap_scale\" : 0.1 , \"max_pc_height\" : 0.2 , \"min_pc_height\" : - 0.5 , \"x_filter\" :[ - 0.2 , 0.2 ], \"y_filter\" :[ - 0.1 , 0.1 ], \"costmap_obs_inflation\" : 1.0 , \"occ_obs_deadzone\" : 0.2 , \"dt\" : 0.1 , \"visualise\" : false }, \"state_estimator\" :{ \"initial_x\" : - 7.7 , \"initial_y\" : - 14.5 , \"initial_z\" : 1.0 , \"initial_w\" : - 0.177 , \"kImuTopic\" : \"imu\" , \"kPoseTopic\" : \"mcl_pose\" , \"ktfUpdate\" : 0.02 , \"kStatusUpdate\" : 1.0 , \"kLoggingUpdate\" : 15.0 , \"kposeDiffmax\" : 5.0 , \"KUse_imu_ori\" : false , \"kBadCovThres\" : 2.0 , \"kGoodCovThres\" : 0.7 , \"kCovBadMax\" : 10 , \"kCovGoodtMax\" : 5 , \"kFilter_z\" : true , \"klimit_min\" : - 0.3 , \"klimit_max\" : 5.0 }, \"planner\" :{ \"lookAheadIndex\" : 15 , \"enable_self_rotate\" : false , \"self_rotation_speed\" : 0.5 , \"self_rotation_speed_final\" : 0.3 , \"dis_threshold\" : 0.5 , \"theta_threshold\" : 0.2 , \"cmd_Smoothing\" : true , } } 3.2 Definitions 3.2.1 Main py_address : The address of the d.ASH server in the formal <IP>:<PORT> . ue_address : The address of the GUI server in the formal <IP>:<PORT> . ssl : Enables secure SSL messaging and encryption. motion_planner : Enables autonomy motion planning. localization : Enables robot localisation, returning users position and orientation in relation to map. sim_mode : Enables Spot odometry retrieval. send_data_gui : Enables ability to send data to GUI server for visualisation. camera : Camera active for the current session to retrieve data ie. RealsenseCam, TestCam . retrieveImg : Enables image retrieval. map_name : Map name used for autonomy (as mentioned in File Organisation ). pc_topic : ROS point cloud topic name for subscribing. odom_topic : ROS odometry topic name for subscribing. 3.2.2 Controller linear_window : Sets DWA (dynamic window approach) size For the following parameters, ensure the value is within limits of the robot. linear_min_v : Sets minimum linear velocity for autonomy. linear_max_v : Sets maximum linear velocity for autonomy. angular_max_w : Sets maximum angular velocity for autonomy. linear_max_a : Sets maximum linear acceleration for autonomy. angular_max_a : Sets maximum angular acceleration for autonomy. For the following parameters, ensure the vlaues are align with the robot as per its documentation. robot_width : Reflects width of robot. robot_length : Reflects the length of robot. obstacle_cost_gains : Sets weight for an obstacle course based on the weighted sum of the map. speed_cost_gains : Sets weight for speed cost. goal_cost_gains : Sets weight for goal cost. angular_speed_cost_scaling_factor : Sets weight for angular velocity. Note that a higher value of the variable discourages the robot from turning. Note that a higher value of the variable slows down the computations. linear_num_window_steps : Sets number of linear velocity values to consider. angular_num_window_steps : Sets number of angular velocity values to consider. prediction_window : Sets prediction horizion (in seconds). costmap_size : Sets local costmap size (in meters). costmap_scale : Sets scale to convert map from meter to pixels. Note that the point cloud height is measured from the center of the lidar. If the ground is detected, it will be considered as an obstacle. Therefore, set the minimum value to be above the ground. max_pc_height : Sets maximum point cloud height to be considered as an obstacle. min_pc_height : Sets minimum point cloud height to be considered as an obstacle. Do not remove too much from the point cloud filter as obstacles around the robot might not be considered. x_filter : Sets vector of size 2 consisting the minimum and maximum x-value of point cloud to be removed. y_filter : Sets vector of size 2 consisting the minimum and maximum y-value of point cloud to be removed. Note that a higher value of the variable results in more conservative planning. costmap_obs_inflation : Sets inflation radius of obstacles to be considered in planning. occ_obs_deadzone : Sets minimum distances from obstacles and robots for autonomy. dt : Sets timestep. Note that a higher timestamp slows down the computation. visualise : Enables visualisation of costmap. This is used only for debugging. 3.2.3 State Estimator initial_x : Sets initialization of x-axis for localizaition (in meters). initial_y : Sets initialization of y-axis for localizaition (in meters). initial_z : Sets initialization of z-axis for localizaition (in meters). initial_w : Sets initialization of orientation for localizaition. kImuTopic : ROS IMU (Inertial Measurement Unit) topic name for subscribing. kPoseTopic : Enables localization result. ktfUpdate : Sets ROS tf publishing frequency. kStatusUpdate : Sets localisation status of publishing frequency. kLoggingUpdate : Sets data logging period. kposeDiffmax : Sets the maximum distance between two consecutive pose estimation. KUse_imu_ori : Enables IMU (Inertial Measurement Unit) or odom orientation for odometry estimation. If this variable is set to true, ensure kImuTopic is available. kBadCovThres : Sets localization quality. kGoodCovThres : Sets localization quality. kCovBadMax : Sets localization quality. kCovGoodtMax : Sets localization quality. kFilter_z : Enables pass through filter application for localization. klimit_min : Sets minimum range of pass through filter. klimit_max : Sets maximum range of pass through filter. 3.2.4 Planner lookAheadIndexv : Sets look-ahead index from the nearest waypoint for path to follow. Note that a lower index slows down the movement of the robot. Similarly, a higher index results in the robot not follow path properly. enable_self_rotate : Enables one round of rotation around the robot itself before performing autonomy. This is to ensure that localisation is working before starting autonomy. self_rotation_speed : Sets angular velocity of robot to turn around itself before performing autonomy (in radiants/second). self_rotation_speed_final : Sets angular velocity of robot to turn around itself after performing autonomy (in radiants/second). This ensures that the final orientation of robot aligns with its goal. Note that a smaller threshold discourages the robot from determing if it has reached its goal. dis_threshold : Sets maximum euclidean distance from the robot to the final goal for destination to be considered having reached its goal. theta_threshold : Sets maximum orientation distance from the robot to the final goal for destination to be considered having reached its goal. cmd_Smoothing : Enables smoothing control commands.","title":"3.0 Auto Configuration"},{"location":"sdk-config/auto-config/#auto-configuration","text":"This section of the d.ASH SDK documentation provides details about the configuration file for the robot autoConfig.json . Information in this section includes variable and definitions to configure autonomy.","title":"Auto Configuration"},{"location":"sdk-config/auto-config/#31-config-file","text":"{ \"py_address\" : \"0.0.0.0:50051\" , \"ue_address\" : \"0.0.0.0:50052\" , \"ssl\" : true , \"motion_planner\" : true , \"localization\" : true , \"sim_mode\" : false , \"send_data_gui\" : true , \"camera\" : \"RealsenseCam\" , \"retrieveImg\" : false , \"map_name\" : \"office_lvl4\" , \"pc_topic\" : \"velodyne_points\" , \"odom_topic\" : \"odom\" , \"controller\" :{ \"linear_window\" : 0.5 , \"linear_min_v\" : 0.0 , \"linear_max_v\" : 0.8 , \"angular_max_w\" : 3.142 , \"linear_max_a\" : 1.0 , \"angular_max_a\" : 5.0 , \"robot_width\" : 0.4 , \"robot_length\" : 1.0 , \"obstacle_cost_gains\" : 3.0 , \"speed_cost_gains\" : 1.0 , \"goal_cost_gains\" : 4.0 , \"angular_speed_cost_scaling_factor\" : 0.1 , \"linear_num_window_steps\" : 50 , \"angular_num_window_steps\" : 30 , \"prediction_window\" : 5.0 , \"costmap_size\" : 20.0 , \"costmap_scale\" : 0.1 , \"max_pc_height\" : 0.2 , \"min_pc_height\" : - 0.5 , \"x_filter\" :[ - 0.2 , 0.2 ], \"y_filter\" :[ - 0.1 , 0.1 ], \"costmap_obs_inflation\" : 1.0 , \"occ_obs_deadzone\" : 0.2 , \"dt\" : 0.1 , \"visualise\" : false }, \"state_estimator\" :{ \"initial_x\" : - 7.7 , \"initial_y\" : - 14.5 , \"initial_z\" : 1.0 , \"initial_w\" : - 0.177 , \"kImuTopic\" : \"imu\" , \"kPoseTopic\" : \"mcl_pose\" , \"ktfUpdate\" : 0.02 , \"kStatusUpdate\" : 1.0 , \"kLoggingUpdate\" : 15.0 , \"kposeDiffmax\" : 5.0 , \"KUse_imu_ori\" : false , \"kBadCovThres\" : 2.0 , \"kGoodCovThres\" : 0.7 , \"kCovBadMax\" : 10 , \"kCovGoodtMax\" : 5 , \"kFilter_z\" : true , \"klimit_min\" : - 0.3 , \"klimit_max\" : 5.0 }, \"planner\" :{ \"lookAheadIndex\" : 15 , \"enable_self_rotate\" : false , \"self_rotation_speed\" : 0.5 , \"self_rotation_speed_final\" : 0.3 , \"dis_threshold\" : 0.5 , \"theta_threshold\" : 0.2 , \"cmd_Smoothing\" : true , } }","title":"3.1 Config File"},{"location":"sdk-config/auto-config/#32-definitions","text":"","title":"3.2 Definitions"},{"location":"sdk-config/auto-config/#321-main","text":"py_address : The address of the d.ASH server in the formal <IP>:<PORT> . ue_address : The address of the GUI server in the formal <IP>:<PORT> . ssl : Enables secure SSL messaging and encryption. motion_planner : Enables autonomy motion planning. localization : Enables robot localisation, returning users position and orientation in relation to map. sim_mode : Enables Spot odometry retrieval. send_data_gui : Enables ability to send data to GUI server for visualisation. camera : Camera active for the current session to retrieve data ie. RealsenseCam, TestCam . retrieveImg : Enables image retrieval. map_name : Map name used for autonomy (as mentioned in File Organisation ). pc_topic : ROS point cloud topic name for subscribing. odom_topic : ROS odometry topic name for subscribing.","title":"3.2.1 Main"},{"location":"sdk-config/auto-config/#322-controller","text":"linear_window : Sets DWA (dynamic window approach) size For the following parameters, ensure the value is within limits of the robot. linear_min_v : Sets minimum linear velocity for autonomy. linear_max_v : Sets maximum linear velocity for autonomy. angular_max_w : Sets maximum angular velocity for autonomy. linear_max_a : Sets maximum linear acceleration for autonomy. angular_max_a : Sets maximum angular acceleration for autonomy. For the following parameters, ensure the vlaues are align with the robot as per its documentation. robot_width : Reflects width of robot. robot_length : Reflects the length of robot. obstacle_cost_gains : Sets weight for an obstacle course based on the weighted sum of the map. speed_cost_gains : Sets weight for speed cost. goal_cost_gains : Sets weight for goal cost. angular_speed_cost_scaling_factor : Sets weight for angular velocity. Note that a higher value of the variable discourages the robot from turning. Note that a higher value of the variable slows down the computations. linear_num_window_steps : Sets number of linear velocity values to consider. angular_num_window_steps : Sets number of angular velocity values to consider. prediction_window : Sets prediction horizion (in seconds). costmap_size : Sets local costmap size (in meters). costmap_scale : Sets scale to convert map from meter to pixels. Note that the point cloud height is measured from the center of the lidar. If the ground is detected, it will be considered as an obstacle. Therefore, set the minimum value to be above the ground. max_pc_height : Sets maximum point cloud height to be considered as an obstacle. min_pc_height : Sets minimum point cloud height to be considered as an obstacle. Do not remove too much from the point cloud filter as obstacles around the robot might not be considered. x_filter : Sets vector of size 2 consisting the minimum and maximum x-value of point cloud to be removed. y_filter : Sets vector of size 2 consisting the minimum and maximum y-value of point cloud to be removed. Note that a higher value of the variable results in more conservative planning. costmap_obs_inflation : Sets inflation radius of obstacles to be considered in planning. occ_obs_deadzone : Sets minimum distances from obstacles and robots for autonomy. dt : Sets timestep. Note that a higher timestamp slows down the computation. visualise : Enables visualisation of costmap. This is used only for debugging.","title":"3.2.2 Controller"},{"location":"sdk-config/auto-config/#323-state-estimator","text":"initial_x : Sets initialization of x-axis for localizaition (in meters). initial_y : Sets initialization of y-axis for localizaition (in meters). initial_z : Sets initialization of z-axis for localizaition (in meters). initial_w : Sets initialization of orientation for localizaition. kImuTopic : ROS IMU (Inertial Measurement Unit) topic name for subscribing. kPoseTopic : Enables localization result. ktfUpdate : Sets ROS tf publishing frequency. kStatusUpdate : Sets localisation status of publishing frequency. kLoggingUpdate : Sets data logging period. kposeDiffmax : Sets the maximum distance between two consecutive pose estimation. KUse_imu_ori : Enables IMU (Inertial Measurement Unit) or odom orientation for odometry estimation. If this variable is set to true, ensure kImuTopic is available. kBadCovThres : Sets localization quality. kGoodCovThres : Sets localization quality. kCovBadMax : Sets localization quality. kCovGoodtMax : Sets localization quality. kFilter_z : Enables pass through filter application for localization. klimit_min : Sets minimum range of pass through filter. klimit_max : Sets maximum range of pass through filter.","title":"3.2.3 State Estimator"},{"location":"sdk-config/auto-config/#324-planner","text":"lookAheadIndexv : Sets look-ahead index from the nearest waypoint for path to follow. Note that a lower index slows down the movement of the robot. Similarly, a higher index results in the robot not follow path properly. enable_self_rotate : Enables one round of rotation around the robot itself before performing autonomy. This is to ensure that localisation is working before starting autonomy. self_rotation_speed : Sets angular velocity of robot to turn around itself before performing autonomy (in radiants/second). self_rotation_speed_final : Sets angular velocity of robot to turn around itself after performing autonomy (in radiants/second). This ensures that the final orientation of robot aligns with its goal. Note that a smaller threshold discourages the robot from determing if it has reached its goal. dis_threshold : Sets maximum euclidean distance from the robot to the final goal for destination to be considered having reached its goal. theta_threshold : Sets maximum orientation distance from the robot to the final goal for destination to be considered having reached its goal. cmd_Smoothing : Enables smoothing control commands.","title":"3.2.4 Planner"},{"location":"sdk-config/rest-config/","text":"Rest Configuration This section of the d.ASH SDK documentation provides details about the configuration file for the rest server - restConfig.json . Information in this section includes variable and definitions to configure the rest server. 1.1 Config File { \"port\" : 3000 , \"certFilename\" : \"./cert.pem\" , \"keyFilename\" : \"./key.pem\" , \"dhParamsFilename\" : \"\" , \"robotRegisterNativeCert\" : true , \"activeIPIdx\" : 1 , \"preferredIP\" : \"10.8.0.5\" , \"runCmds\" : { \"py_server\" : { \"cmdStr\" : \"python ./spotServer.py ./configs/robotDeployConfig.json <!TOKEN!>\" , \"cmdPath\" : \"C:/Users/kestr/Documents/Projects/dc/dash_code/py_server\" # user PATH } } } users need to make sure the IP address of com is within the same subnet/reachable by remote clients (establish VPN) 1.2 Definitions 1.2.1 Main port : Fixed port number. certFilename : Fixed certification filename. keyFilename : Fixed certification key filename. dhParamsFilename : Fixed parameter filename. robotRegisterNativeCert : If you registed with register_bot_native, the data will be encrypted. Always set this variable to true. activeIPIdx : Selects the IP address you will send to the backend cloud service for robot discovery. This is an integer index ( from 0 to N ), based on the IP addresses available on your system. When the rest service starts up, you should see a list. Set the value to the appropriate index you want. This index will map the the IP which the clients will try to connect to preferredIP : Selects your preferred IP from the list of IPs. Specify the IP as a string in this case. 1.2.2 d.ASH Server Commands cmdStr : Sets command to run d.ASH server. cmdPath : Sets command path.","title":"1.0 Rest Configuration"},{"location":"sdk-config/rest-config/#rest-configuration","text":"This section of the d.ASH SDK documentation provides details about the configuration file for the rest server - restConfig.json . Information in this section includes variable and definitions to configure the rest server.","title":"Rest Configuration"},{"location":"sdk-config/rest-config/#11-config-file","text":"{ \"port\" : 3000 , \"certFilename\" : \"./cert.pem\" , \"keyFilename\" : \"./key.pem\" , \"dhParamsFilename\" : \"\" , \"robotRegisterNativeCert\" : true , \"activeIPIdx\" : 1 , \"preferredIP\" : \"10.8.0.5\" , \"runCmds\" : { \"py_server\" : { \"cmdStr\" : \"python ./spotServer.py ./configs/robotDeployConfig.json <!TOKEN!>\" , \"cmdPath\" : \"C:/Users/kestr/Documents/Projects/dc/dash_code/py_server\" # user PATH } } } users need to make sure the IP address of com is within the same subnet/reachable by remote clients (establish VPN)","title":"1.1 Config File"},{"location":"sdk-config/rest-config/#12-definitions","text":"","title":"1.2 Definitions"},{"location":"sdk-config/rest-config/#121-main","text":"port : Fixed port number. certFilename : Fixed certification filename. keyFilename : Fixed certification key filename. dhParamsFilename : Fixed parameter filename. robotRegisterNativeCert : If you registed with register_bot_native, the data will be encrypted. Always set this variable to true. activeIPIdx : Selects the IP address you will send to the backend cloud service for robot discovery. This is an integer index ( from 0 to N ), based on the IP addresses available on your system. When the rest service starts up, you should see a list. Set the value to the appropriate index you want. This index will map the the IP which the clients will try to connect to preferredIP : Selects your preferred IP from the list of IPs. Specify the IP as a string in this case.","title":"1.2.1 Main"},{"location":"sdk-config/rest-config/#122-dash-server-commands","text":"cmdStr : Sets command to run d.ASH server. cmdPath : Sets command path.","title":"1.2.2 d.ASH Server Commands"},{"location":"sdk-config/robot-config/","text":"Robot Configuration This section of the d.ASH SDK documentation provides details about the configuration file for the robot robotConfig.json . Information in this section includes variable and definitions used to configure the d.ASH server . 2.1 Config File { \"serverAddress\" : \"localhost:50051\" , \"robotHostname\" : \"192.168.80.3\" , \"username\" : \"user5\" , \"camList\" : [ \"RealsenseCam\" ], \"payloads\" : [], \"dataStateLogFolder\" : \"G:/Temp/logs\" , \"ssl\" : true , \"fastServer\" : false , \"fastServerHostname\" : \"localhost:7777\" , \"secureDefaultToken\" : false , \"testMode\" : true , \"withAudio\" : true , \"realSenseConfig\" : { \"test\" : true , \"testFilenames\" : [ \"../../test_videos/nus_left.mp4\" , \"../../test_videos/nus_center.mp4\" , \"../../test_videos/nus_right.mp4\" ], \"flipOptions\" : { \"0\" : [ false , false ], \"1\" : [ true , true ], \"2\" : [ false , false ] }, \"baseWidth\" : 640 , \"baseHeight\" : 480 , \"codec\" : \"video\" , \"width\" : 320 , \"height\" : 240 , \"bitrate\" : 3600000 } } 2.2 Definitions 2.2.1 Main serverAddress : Sets address of the spotServer in <HOSTNAME>:<PORT> format. robotHostname : Sets hostname of the Spot to connect to robot's IP. username : Sets username for d.ASH server credentials. camList : Sets a list of cameras active for the current session. payloads : Optional payloads list. dataStateLogFolder : Sets folder to write out the recorded msgpack data of the robot. ssl : Enables secure SSL messaging and encryption. testMode : Enables the Spot server to enter into test mode. withAudio : Enables audio streaming playback. 2.2.2 Intel RealSense Configuration test : Enables simulation of camera streaming via provided custom mp4 video files specified as a list in testFilenames . testFilenames : List of test files. flipOptions : Specify how each camera flips long the x-axis and y-axis following the format {\"index\" : [x-flip, y-flip]} baseWidth : Sets processing width of the camera stream. baseHeight : Sets the processing height of the camera stream. Video will be processed at this base resolution before being resized via width and height . Use these variables to change the actual processed resolution for power/efficiency considerations of the RealSense devices. Note that a minimum baseWidth of 640 and a minimum baseHeight of 360 is required. codec : Sets jpg/video options, with jpg being regular jpeg encoding and video using VP9 encoding. width : Adjusts the final returned/resized width dimensions of the input camera stream height : Adjusts the final returned/resized height dimensions of the input camera stream bitrate : This is the quality of the video encoding [only applies to video streaming] Note for HD Streaming, RealSense requires a high bitrate of 3600000.","title":"2.0 Robot Configuration"},{"location":"sdk-config/robot-config/#robot-configuration","text":"This section of the d.ASH SDK documentation provides details about the configuration file for the robot robotConfig.json . Information in this section includes variable and definitions used to configure the d.ASH server .","title":"Robot Configuration"},{"location":"sdk-config/robot-config/#21-config-file","text":"{ \"serverAddress\" : \"localhost:50051\" , \"robotHostname\" : \"192.168.80.3\" , \"username\" : \"user5\" , \"camList\" : [ \"RealsenseCam\" ], \"payloads\" : [], \"dataStateLogFolder\" : \"G:/Temp/logs\" , \"ssl\" : true , \"fastServer\" : false , \"fastServerHostname\" : \"localhost:7777\" , \"secureDefaultToken\" : false , \"testMode\" : true , \"withAudio\" : true , \"realSenseConfig\" : { \"test\" : true , \"testFilenames\" : [ \"../../test_videos/nus_left.mp4\" , \"../../test_videos/nus_center.mp4\" , \"../../test_videos/nus_right.mp4\" ], \"flipOptions\" : { \"0\" : [ false , false ], \"1\" : [ true , true ], \"2\" : [ false , false ] }, \"baseWidth\" : 640 , \"baseHeight\" : 480 , \"codec\" : \"video\" , \"width\" : 320 , \"height\" : 240 , \"bitrate\" : 3600000 } }","title":"2.1 Config File"},{"location":"sdk-config/robot-config/#22-definitions","text":"","title":"2.2 Definitions"},{"location":"sdk-config/robot-config/#221-main","text":"serverAddress : Sets address of the spotServer in <HOSTNAME>:<PORT> format. robotHostname : Sets hostname of the Spot to connect to robot's IP. username : Sets username for d.ASH server credentials. camList : Sets a list of cameras active for the current session. payloads : Optional payloads list. dataStateLogFolder : Sets folder to write out the recorded msgpack data of the robot. ssl : Enables secure SSL messaging and encryption. testMode : Enables the Spot server to enter into test mode. withAudio : Enables audio streaming playback.","title":"2.2.1 Main"},{"location":"sdk-config/robot-config/#222-intel-realsense-configuration","text":"test : Enables simulation of camera streaming via provided custom mp4 video files specified as a list in testFilenames . testFilenames : List of test files. flipOptions : Specify how each camera flips long the x-axis and y-axis following the format {\"index\" : [x-flip, y-flip]} baseWidth : Sets processing width of the camera stream. baseHeight : Sets the processing height of the camera stream. Video will be processed at this base resolution before being resized via width and height . Use these variables to change the actual processed resolution for power/efficiency considerations of the RealSense devices. Note that a minimum baseWidth of 640 and a minimum baseHeight of 360 is required. codec : Sets jpg/video options, with jpg being regular jpeg encoding and video using VP9 encoding. width : Adjusts the final returned/resized width dimensions of the input camera stream height : Adjusts the final returned/resized height dimensions of the input camera stream bitrate : This is the quality of the video encoding [only applies to video streaming] Note for HD Streaming, RealSense requires a high bitrate of 3600000.","title":"2.2.2 Intel RealSense Configuration"},{"location":"setup/dash-server/","text":"Setting Up d.ASH Server As mentioned previously, the d.ASH server acts as a secured py-server responsible for sending control commands to the robot and for broadcasting data to any given remote systems. This section of the d.ASH SDK documentation provides details about setting up the d.ASH server. Information in this section includes compiling, and testing. 3.1 Installing d.ASH Server Dependencies To install the d.ASH server dependencies using pip, the following desktop dependencies must be set up prior: Intel RealSense SDK 2.0 ROS Melodic on Ubuntu 18.04 FFmpeg If the above dependencies have been installed, proceed by running the following command to install the rest of the python packages: python3.7 configLibs.py 3.2 Setting up Rest Configuration Before you test the d.ASH server, you will need to config the rest server file, restConfig.json located in the folder config . Firstly, run runrest to see available IP address for your rest server: runrest Pick the index of the IP address you like and append it to the activeIPIdx variable: \"activeIPIdx\" : 1, # where '1' is the chosen IP address indec Then, you will need to set your preferredIP address, that is, the IP address for the computer onboard your robot. This IP address will have precedence over activeIPIdx . Similarly, replace the default IP address with your preferred IP address: \"preferredIP\" : \"10.8.0.5\", Ensure that the IP address of the onboard computer is within the same subnet by the remote client. Lastly, you will need to change the <PATH> of cmdPath . To do this, pwd to print your current working directory path. $ pwd C:/Users/dc/Desktop/dash_sdk/py_server 3.3 Testing Your Server To test your server, you'll firstly need to run the d.ASH server by entering the following command: ./ robot_rest ~/. data / restConfig . json $ python3 .7 ./ spotServer . py robotConfig . json Now that your d.ASH server is running, you will need to connect the server with the pilot_client . This will allow any available cameras to show up as options on your screen. To connect to the pilot client, ... Finally, try switching to the test camera streaming and verify the test camera is streaming properly.","title":"3.0 Setting up d.ASH Server"},{"location":"setup/dash-server/#setting-up-dash-server","text":"As mentioned previously, the d.ASH server acts as a secured py-server responsible for sending control commands to the robot and for broadcasting data to any given remote systems. This section of the d.ASH SDK documentation provides details about setting up the d.ASH server. Information in this section includes compiling, and testing.","title":"Setting Up d.ASH Server"},{"location":"setup/dash-server/#31-installing-dash-server-dependencies","text":"To install the d.ASH server dependencies using pip, the following desktop dependencies must be set up prior: Intel RealSense SDK 2.0 ROS Melodic on Ubuntu 18.04 FFmpeg If the above dependencies have been installed, proceed by running the following command to install the rest of the python packages: python3.7 configLibs.py","title":"3.1 Installing d.ASH Server Dependencies"},{"location":"setup/dash-server/#32-setting-up-rest-configuration","text":"Before you test the d.ASH server, you will need to config the rest server file, restConfig.json located in the folder config . Firstly, run runrest to see available IP address for your rest server: runrest Pick the index of the IP address you like and append it to the activeIPIdx variable: \"activeIPIdx\" : 1, # where '1' is the chosen IP address indec Then, you will need to set your preferredIP address, that is, the IP address for the computer onboard your robot. This IP address will have precedence over activeIPIdx . Similarly, replace the default IP address with your preferred IP address: \"preferredIP\" : \"10.8.0.5\", Ensure that the IP address of the onboard computer is within the same subnet by the remote client. Lastly, you will need to change the <PATH> of cmdPath . To do this, pwd to print your current working directory path. $ pwd C:/Users/dc/Desktop/dash_sdk/py_server","title":"3.2 Setting up Rest Configuration"},{"location":"setup/dash-server/#33-testing-your-server","text":"To test your server, you'll firstly need to run the d.ASH server by entering the following command: ./ robot_rest ~/. data / restConfig . json $ python3 .7 ./ spotServer . py robotConfig . json Now that your d.ASH server is running, you will need to connect the server with the pilot_client . This will allow any available cameras to show up as options on your screen. To connect to the pilot client, ... Finally, try switching to the test camera streaming and verify the test camera is streaming properly.","title":"3.3 Testing Your Server"},{"location":"setup/desktop-dep/","text":"Installing Dependencies on the Desktop While most of the d.ASH SDK build is hermetic, some system dependencies on the Desktop are required. This section of the d.ASH SDK documentation provides details for Intel RealSense SDK, Ubuntu, ROS Melodic, and FFmpeg installations. Firstly, the following desktop dependencies must be set up prior to installing the appropriate libraries for the d.ASH server: ROS Melodic on Ubuntu 18.04 Intel RealSense SDK 2.0 FFmpeg 1.1 Ubuntu Installation Ubuntu is a complete Linux operating system, which will serve as the primary platform for ROS . Currently, the d.ASH SDK only supports Linux Ubuntu 18.04 LTS for development and simulation from your workstation. Ubuntu Installation via Bootable USB If you would like to install Ubuntu via a bootable USB, you can do so for both Windows and MacOS . Ubuntu Installation via Virtual Machine If you would like to install Ubuntu via a virtual machine, you can do so using VirtualBox to kickstart your installation process. Once Ubuntu is installed, check that your version of Ubuntu has the release code 18.04 . Open the terminal and type the command: $ lsb_release - a No LSB modules are available . Distributor ID : Ubuntu Description : Ubuntu 18.04.5 LTS Release : 18.04 Codename : bionic 1.2 ROS Installation ROS (Robot Operating System) is a open-source framework that helps researchers and developers build and reuse code between robotics applications. Currently, the d.ASH SDK only supports ROS Melodic for development and simulation from your workstation. Use Ubuntu to install ROS melodic onto your computer system. Once ROS has been installed on your Linux system, check that your version of ROS is melodic . Open the terminal and type the command: $ rosversion -d melodic 1.3 Intel RealSense SDK Installation Intel RealSense is an RGB camera with channels designed for depth perception capabilities. The RealSense SDK 2.0 provides installation packages for Intel X86/AMD64-based Debian distributions in dpkg format for Ubuntu 16/18/20 LTS. Then, you'll be able to configure custom settings for any Intel RealSense cameras attached to the system to stream images to remote clients. Use Ubuntu to install Intel RealSense SDK 2.0 onto your computer system. 1.4 FFmpeg Installation FFmpeg is an open-source software project consisting of libraries and programs that handle video, audio, and other multimedia files and streams. To install FFmpeg, run the following commands: $ sudo add-apt-repository ppa:jonathonf/ffmpeg-4 $ sudo apt-get install ffmpeg libavcodec-dev libavdevice-dev libavfilter-dev libavformat-dev libavresample-dev libavutil-dev libpostproc-dev libswresample-dev libswscale-dev libgoogle-glog-dev 1.5 Python Requirements The d.ASH SDK works with Python 3.7 . To properly run the server, you will also need to install a python package installer and a python environment management system. 1.5.1 apt-get Installed in Ubuntu and any Ubuntu-based Linux distribution, apt-get is tool for installing, upgrading, and cleaning packages. To set up the new environment, execute the following command: $ sudo apt-get install -y python3.7-dev 1.5.2 Pip Installation Pip is a package installer for Python. The d.ASH SDK and the third-party packages used by many of its programming examples use pip to install. To install pip, run the following command on Ubuntu: sudo apt install python3 .7 python3 - pip python - pip python3 .7 - m pip instal -- upgrade pip","title":"1.0 Installing Desktop Dependencies"},{"location":"setup/desktop-dep/#installing-dependencies-on-the-desktop","text":"While most of the d.ASH SDK build is hermetic, some system dependencies on the Desktop are required. This section of the d.ASH SDK documentation provides details for Intel RealSense SDK, Ubuntu, ROS Melodic, and FFmpeg installations. Firstly, the following desktop dependencies must be set up prior to installing the appropriate libraries for the d.ASH server: ROS Melodic on Ubuntu 18.04 Intel RealSense SDK 2.0 FFmpeg","title":"Installing Dependencies on the Desktop"},{"location":"setup/desktop-dep/#11-ubuntu-installation","text":"Ubuntu is a complete Linux operating system, which will serve as the primary platform for ROS . Currently, the d.ASH SDK only supports Linux Ubuntu 18.04 LTS for development and simulation from your workstation. Ubuntu Installation via Bootable USB If you would like to install Ubuntu via a bootable USB, you can do so for both Windows and MacOS . Ubuntu Installation via Virtual Machine If you would like to install Ubuntu via a virtual machine, you can do so using VirtualBox to kickstart your installation process. Once Ubuntu is installed, check that your version of Ubuntu has the release code 18.04 . Open the terminal and type the command: $ lsb_release - a No LSB modules are available . Distributor ID : Ubuntu Description : Ubuntu 18.04.5 LTS Release : 18.04 Codename : bionic","title":"1.1 Ubuntu Installation"},{"location":"setup/desktop-dep/#12-ros-installation","text":"ROS (Robot Operating System) is a open-source framework that helps researchers and developers build and reuse code between robotics applications. Currently, the d.ASH SDK only supports ROS Melodic for development and simulation from your workstation. Use Ubuntu to install ROS melodic onto your computer system. Once ROS has been installed on your Linux system, check that your version of ROS is melodic . Open the terminal and type the command: $ rosversion -d melodic","title":"1.2 ROS Installation"},{"location":"setup/desktop-dep/#13-intel-realsense-sdk-installation","text":"Intel RealSense is an RGB camera with channels designed for depth perception capabilities. The RealSense SDK 2.0 provides installation packages for Intel X86/AMD64-based Debian distributions in dpkg format for Ubuntu 16/18/20 LTS. Then, you'll be able to configure custom settings for any Intel RealSense cameras attached to the system to stream images to remote clients. Use Ubuntu to install Intel RealSense SDK 2.0 onto your computer system.","title":"1.3 Intel RealSense SDK Installation"},{"location":"setup/desktop-dep/#14-ffmpeg-installation","text":"FFmpeg is an open-source software project consisting of libraries and programs that handle video, audio, and other multimedia files and streams. To install FFmpeg, run the following commands: $ sudo add-apt-repository ppa:jonathonf/ffmpeg-4 $ sudo apt-get install ffmpeg libavcodec-dev libavdevice-dev libavfilter-dev libavformat-dev libavresample-dev libavutil-dev libpostproc-dev libswresample-dev libswscale-dev libgoogle-glog-dev","title":"1.4 FFmpeg Installation"},{"location":"setup/desktop-dep/#15-python-requirements","text":"The d.ASH SDK works with Python 3.7 . To properly run the server, you will also need to install a python package installer and a python environment management system.","title":"1.5 Python Requirements"},{"location":"setup/desktop-dep/#151-apt-get","text":"Installed in Ubuntu and any Ubuntu-based Linux distribution, apt-get is tool for installing, upgrading, and cleaning packages. To set up the new environment, execute the following command: $ sudo apt-get install -y python3.7-dev","title":"1.5.1 apt-get"},{"location":"setup/desktop-dep/#152-pip-installation","text":"Pip is a package installer for Python. The d.ASH SDK and the third-party packages used by many of its programming examples use pip to install. To install pip, run the following command on Ubuntu: sudo apt install python3 .7 python3 - pip python - pip python3 .7 - m pip instal -- upgrade pip","title":"1.5.2 Pip Installation"},{"location":"setup/payload-reg/","text":"Payload Registration Before running the d.ASH SDK, please make sure your all your credentials have been set up correctly. This means using the right username and the right password. This section of the d.ASH SDK documentation provides details about setting up credentials for the d.ASH SDK. Information in this section includes the d.ASH server and the ROS driver credentials setup. Files will be found in the folder registration under the SDK. 2.1 d.ASH Server Credentials To set up the local credentials for the d.ASH server, you will need to by run the file: setServerPassNative . Run the following command replacing <username> with your chosen username and <password> with your chosen password. $ ./setServerPassNative -u <username> -p <password> For example, if your username is user123 and your password is ilovedASH , your commands would look like this: $ ./ setServerPassNative - u user123 - p ilovedASH Username in Robot Configuration Please ensure that the username for the d.ASH server is the same as the one defined in the robot configuration file - robotConfig.json . For example, you would set \"username\" : \"<username>\" . 2.2 Robot Registration To register the payload computer with d.ASH's backend system, you will need to by run the file: register_bot_native . However, you will first need to configure the registerBot.json found in the config folder of the SDK. Set <robot_name> to any name you like, and set <robot _username> to your dConstruct cloud admin username. For example, if your robot name is robot1 and your cloud admin user name is user123 , your registerBot.json would look like this: { RobotName: robot1, RobotUserName: user123 } Now, run the following command to register your robot: register_bot_native -i ../config/registerBot.json 2.3 ROS Driver Credentials To set up the local credentials for the ROS driver, you will need to by run the file: setAutonomyCred . Run the following command replacing <username> with your cloud admin username and <password> with your cloud admin password. cd ./ setAutoCred / build ./ setAutonomyCred - u < username > For example, if your username is user123 , your command would look like this: cd ./ setAutoCred / build ./ setAutonomyCred - u user123 - p ilovedASH You will then be prompted to enter a . This will match your cloud admin password.","title":"2.0 Payload Registration"},{"location":"setup/payload-reg/#payload-registration","text":"Before running the d.ASH SDK, please make sure your all your credentials have been set up correctly. This means using the right username and the right password. This section of the d.ASH SDK documentation provides details about setting up credentials for the d.ASH SDK. Information in this section includes the d.ASH server and the ROS driver credentials setup. Files will be found in the folder registration under the SDK.","title":"Payload Registration"},{"location":"setup/payload-reg/#21-dash-server-credentials","text":"To set up the local credentials for the d.ASH server, you will need to by run the file: setServerPassNative . Run the following command replacing <username> with your chosen username and <password> with your chosen password. $ ./setServerPassNative -u <username> -p <password> For example, if your username is user123 and your password is ilovedASH , your commands would look like this: $ ./ setServerPassNative - u user123 - p ilovedASH Username in Robot Configuration Please ensure that the username for the d.ASH server is the same as the one defined in the robot configuration file - robotConfig.json . For example, you would set \"username\" : \"<username>\" .","title":"2.1 d.ASH Server Credentials"},{"location":"setup/payload-reg/#22-robot-registration","text":"To register the payload computer with d.ASH's backend system, you will need to by run the file: register_bot_native . However, you will first need to configure the registerBot.json found in the config folder of the SDK. Set <robot_name> to any name you like, and set <robot _username> to your dConstruct cloud admin username. For example, if your robot name is robot1 and your cloud admin user name is user123 , your registerBot.json would look like this: { RobotName: robot1, RobotUserName: user123 } Now, run the following command to register your robot: register_bot_native -i ../config/registerBot.json","title":"2.2 Robot Registration"},{"location":"setup/payload-reg/#23-ros-driver-credentials","text":"To set up the local credentials for the ROS driver, you will need to by run the file: setAutonomyCred . Run the following command replacing <username> with your cloud admin username and <password> with your cloud admin password. cd ./ setAutoCred / build ./ setAutonomyCred - u < username > For example, if your username is user123 , your command would look like this: cd ./ setAutoCred / build ./ setAutonomyCred - u user123 - p ilovedASH You will then be prompted to enter a . This will match your cloud admin password.","title":"2.3 ROS Driver Credentials"},{"location":"setup/ros-driver/","text":"ROS Driver As mentioned, the ROS driver is a ROS node handles computational calls and sends control commands to the d.ASH server. It acts as an intermediate layer for ROS messages to be communicated with d.ASH server and unreal-clients through gRPC . 5.1 Update External Libraries First, let's update the external libs, more specifically the grpc_layer , by executing the following commands: $ git submodule update --init --recursive $ git submodule update --remote --merge 5.2 Installing Vcpkg Vcpkg is a tool to manage C and C++ libraries on Windows, Linux and MacOS. Firtsly, you'll need to install vcpkg . Once installed, we need to use vcpkg to download the following packages to set up the ROS Driver: $ cd ~/vcpkg $ ./vcpkg install grpc:x64-linux $ ./vcpkg install nlohmann-json:x64-linux $ ./vcpkg install libsodium:x64-linux $ ./vcpkg install msgpack:x64-linux $ ./vcpkg install eigen3:x64-linux $ ./vcpkg install opencv[world]:x64-linux $ ./vcpkg install spdlog:x64-linux $ ./vcpkg install pcl:x64-linux Then, using apt-get to install following packages to set up the ROS Driver: $ sudo apt install ros-melodic-hector-trajectory-server ros-melodic-realsense2-camera ros-melodic-velodyne ros-melodic-joy ros-melodic-octomap ros-melodic-dynamic-edt-3d ros-melodic-tf2 ros-melodic-serial* libgoogle-glog-dev git libssl-dev libusb-1.0-0-dev pkg-config libgtk-3-dev libglfw3-dev libgl1-mesa-dev libglu1-mesa-dev $ sudo add-apt-repository ppa:joseluisblancoc/gtsam-develop $ sudo apt update $ sudo apt install libgtsam-dev $ sudo apt-key adv --keyserver keys.gnupg.net --recv-key 6F3EFCDE $ sudo apt update $ sudo apt install librealsense2* $ sudo apt install libudev-dev $ sudo apt-get install libsecret-1-dev 5.3 Configuration Now, we need to place the autoConfig.json into the folder ~/.data . Similarly, make sure security files are stored in the folder ~/.data/security/ . 5.4 Running the Driver Once compiled, run executable SDK to start autonomy driver ./ros_msg_interface ~/.data/autoConfig.json Launch to test the sensors - for autonomy need to turn on sensor cd launch/ roslauch # activate sensors 3D scanner","title":"5.0 Setting up ROS Driver"},{"location":"setup/ros-driver/#ros-driver","text":"As mentioned, the ROS driver is a ROS node handles computational calls and sends control commands to the d.ASH server. It acts as an intermediate layer for ROS messages to be communicated with d.ASH server and unreal-clients through gRPC .","title":"ROS Driver"},{"location":"setup/ros-driver/#51-update-external-libraries","text":"First, let's update the external libs, more specifically the grpc_layer , by executing the following commands: $ git submodule update --init --recursive $ git submodule update --remote --merge","title":"5.1 Update External Libraries"},{"location":"setup/ros-driver/#52-installing-vcpkg","text":"Vcpkg is a tool to manage C and C++ libraries on Windows, Linux and MacOS. Firtsly, you'll need to install vcpkg . Once installed, we need to use vcpkg to download the following packages to set up the ROS Driver: $ cd ~/vcpkg $ ./vcpkg install grpc:x64-linux $ ./vcpkg install nlohmann-json:x64-linux $ ./vcpkg install libsodium:x64-linux $ ./vcpkg install msgpack:x64-linux $ ./vcpkg install eigen3:x64-linux $ ./vcpkg install opencv[world]:x64-linux $ ./vcpkg install spdlog:x64-linux $ ./vcpkg install pcl:x64-linux Then, using apt-get to install following packages to set up the ROS Driver: $ sudo apt install ros-melodic-hector-trajectory-server ros-melodic-realsense2-camera ros-melodic-velodyne ros-melodic-joy ros-melodic-octomap ros-melodic-dynamic-edt-3d ros-melodic-tf2 ros-melodic-serial* libgoogle-glog-dev git libssl-dev libusb-1.0-0-dev pkg-config libgtk-3-dev libglfw3-dev libgl1-mesa-dev libglu1-mesa-dev $ sudo add-apt-repository ppa:joseluisblancoc/gtsam-develop $ sudo apt update $ sudo apt install libgtsam-dev $ sudo apt-key adv --keyserver keys.gnupg.net --recv-key 6F3EFCDE $ sudo apt update $ sudo apt install librealsense2* $ sudo apt install libudev-dev $ sudo apt-get install libsecret-1-dev","title":"5.2 Installing Vcpkg"},{"location":"setup/ros-driver/#53-configuration","text":"Now, we need to place the autoConfig.json into the folder ~/.data . Similarly, make sure security files are stored in the folder ~/.data/security/ .","title":"5.3 Configuration"},{"location":"setup/ros-driver/#54-running-the-driver","text":"Once compiled, run executable SDK to start autonomy driver ./ros_msg_interface ~/.data/autoConfig.json Launch to test the sensors - for autonomy need to turn on sensor cd launch/ roslauch # activate sensors 3D scanner","title":"5.4 Running the Driver"},{"location":"setup/vpn/","text":"Setting Up d.ASH VPN Two separate login credentials are required for two seperate VPN connectiosn - one for the robot onboard computer and one for the remote client. This section of the d.ASH SDK documentation provides details about setting up the d.ASH VPN. 4.1 Setting Up VPN Onboard Computer To start, you will need to install some packages to configure automatic VPN connection on Ubuntu 18.04 LTS by executing the following command: sudo apt install network - manager - openvpn network - manager - openvpn - gnome openvpn openvpn - systemd - resolved - y This will install an openvpn package, which creates a /etc/openvpn/client/ directory into which you can place the OpenVPN client configuration file. You will need to configure the VPN configuration file - client.ovpn which can be found in your vpn folder /dash_sdk/vpn . To do so, run the following command: dash-sdk/ \u2514\u2500 vpn/ \u2514\u2500 client.ovpn \u2514\u2500 ca.crt \u2514\u2500 <user>.crt \u2514\u2500 <user>.key Note that <user> in this instance is replaced by your dConstruct admin username. Now, you will need to copy client.ovpn and your user certifications - ca.crt , <user>.crt , <user>.key - into the new open-vpn directory. In the /dash_sdk directory, execute the following commands: python3 .7 configVPN . py sudo cp client . ovpn / etc / openvpn / client / client . conf sudo cp ca . crt < user >. crt < user >. key / etc / openvpn / client For example, if your dConstruct admin username is user123 , you would replacing <user> with user123 : sudo cp client . ovpn / etc / openvpn / client / client . conf sudo cp ca . crt user123 . crt user123 . key / etc / openvpn / client To check that your files have been copied and renamed correctly, cd into the /etc/openvpn/client directory and ls to see your list of files. You should have client.conf and your user certification files, namely ca.crt .crt . : cd / etc / openvpn / client ls etc/ \u2514\u2500 openvpn/ \u2514\u2500 client/ \u2514\u2500 client.conf \u2514\u2500 ca.crt \u2514\u2500 <user>.crt \u2514\u2500 <user>.key Now, let's test that the VPN service was set up correctly by running the following command: sudo systemctl start openvpn - client @client . service If there is no error print, proceed onto the next step. If you come across a failure, ensure that the path in client.conf matches the following format: cat \\ etc \\ openvpn \\ client \\ ca . crt cert \\ etc \\ openvpn \\ client \\ < user >. crt key \\ etc \\ openvpn \\ client \\ < user >. crt Now, to check your VPN status, enter the following command: sudo systemctl status openvpn - client @client . service If successful, you should be able to see the status Initialization Sequence Completed . Lastly, enable the VPN onboard your computer by executing the following command: sudo systemctl enable openvpn - client @client . service 4.2 Setting Up VPN Remote Client Remember to use a separate login credential from the robot onboard computer credentials as at any point in time, there can only be one active user session. Firstly, download OpenVPN Connect . Once OpenVPN has been launched, click on the tab - 'Import from File' tab and drag-and-drop the client.ovpn file located in \\dash-sdk\\vpn\\<USERNAME> . It is important to note that the client.ovpn file has to be in the same directory as there certification files, namely ca.crt .crt .key : dash-sdk/ \u2514\u2500 vpn/ \u2514\u2500 client.ovpn \u2514\u2500 ca.crt \u2514\u2500 user.crt \u2514\u2500 user.key","title":"4.0 Setting up d.ASH VPN"},{"location":"setup/vpn/#setting-up-dash-vpn","text":"Two separate login credentials are required for two seperate VPN connectiosn - one for the robot onboard computer and one for the remote client. This section of the d.ASH SDK documentation provides details about setting up the d.ASH VPN.","title":"Setting Up d.ASH VPN"},{"location":"setup/vpn/#41-setting-up-vpn-onboard-computer","text":"To start, you will need to install some packages to configure automatic VPN connection on Ubuntu 18.04 LTS by executing the following command: sudo apt install network - manager - openvpn network - manager - openvpn - gnome openvpn openvpn - systemd - resolved - y This will install an openvpn package, which creates a /etc/openvpn/client/ directory into which you can place the OpenVPN client configuration file. You will need to configure the VPN configuration file - client.ovpn which can be found in your vpn folder /dash_sdk/vpn . To do so, run the following command: dash-sdk/ \u2514\u2500 vpn/ \u2514\u2500 client.ovpn \u2514\u2500 ca.crt \u2514\u2500 <user>.crt \u2514\u2500 <user>.key Note that <user> in this instance is replaced by your dConstruct admin username. Now, you will need to copy client.ovpn and your user certifications - ca.crt , <user>.crt , <user>.key - into the new open-vpn directory. In the /dash_sdk directory, execute the following commands: python3 .7 configVPN . py sudo cp client . ovpn / etc / openvpn / client / client . conf sudo cp ca . crt < user >. crt < user >. key / etc / openvpn / client For example, if your dConstruct admin username is user123 , you would replacing <user> with user123 : sudo cp client . ovpn / etc / openvpn / client / client . conf sudo cp ca . crt user123 . crt user123 . key / etc / openvpn / client To check that your files have been copied and renamed correctly, cd into the /etc/openvpn/client directory and ls to see your list of files. You should have client.conf and your user certification files, namely ca.crt .crt . : cd / etc / openvpn / client ls etc/ \u2514\u2500 openvpn/ \u2514\u2500 client/ \u2514\u2500 client.conf \u2514\u2500 ca.crt \u2514\u2500 <user>.crt \u2514\u2500 <user>.key Now, let's test that the VPN service was set up correctly by running the following command: sudo systemctl start openvpn - client @client . service If there is no error print, proceed onto the next step. If you come across a failure, ensure that the path in client.conf matches the following format: cat \\ etc \\ openvpn \\ client \\ ca . crt cert \\ etc \\ openvpn \\ client \\ < user >. crt key \\ etc \\ openvpn \\ client \\ < user >. crt Now, to check your VPN status, enter the following command: sudo systemctl status openvpn - client @client . service If successful, you should be able to see the status Initialization Sequence Completed . Lastly, enable the VPN onboard your computer by executing the following command: sudo systemctl enable openvpn - client @client . service","title":"4.1 Setting Up VPN Onboard Computer"},{"location":"setup/vpn/#42-setting-up-vpn-remote-client","text":"Remember to use a separate login credential from the robot onboard computer credentials as at any point in time, there can only be one active user session. Firstly, download OpenVPN Connect . Once OpenVPN has been launched, click on the tab - 'Import from File' tab and drag-and-drop the client.ovpn file located in \\dash-sdk\\vpn\\<USERNAME> . It is important to note that the client.ovpn file has to be in the same directory as there certification files, namely ca.crt .crt .key : dash-sdk/ \u2514\u2500 vpn/ \u2514\u2500 client.ovpn \u2514\u2500 ca.crt \u2514\u2500 user.crt \u2514\u2500 user.key","title":"4.2 Setting Up VPN Remote Client"}]}