{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"dConstruct d.ASH SDK The dConstruct d.ASH SDK is an SDK (software development kit) for autonomous robot navigation. Use the d.ASH SDK to develop applications for your own Spot from Boston Dynamics or any other robot you wish. This section of the d.ASH SDK documentation provides details about the components of the SDK. Autonomy Preparation There are 3 main components encompassing the d.ASH SDK: d.ASH Server ROS Driver d.ASH Autonomy Controller If you decide to use your own custom GUI in place of the d.ASH Autonomy Controller , or you do not want to run autonomy, you will still need to implement the d.ASH Server and the ROS Driver to operate your robot. d.ASH Server The d.ASH server acts as the main server responsible for sending control commands to the robot. At the same time, the d.ASH server also broadcasts secured data to any given remote systems. ROS Driver The ROS driver is a ROS node that has autonomy functions onboard to make your robot accessible from ROS. The ROS driver handles computational calls from any client and sends control commands to the d.ASH server. In turn, the d.ASH server relays the autonomy commands to the robot for execution. d.ASH Autonomy Controller The d.ASH autonomy controller is the GUI (graphical user interface) for the d.ASH SDK. It encompasses the interactive visual components for d.ASH's software and displays different elements for users to interact with to control your robot.","title":"Introduction"},{"location":"#dconstruct-dash-sdk","text":"The dConstruct d.ASH SDK is an SDK (software development kit) for autonomous robot navigation. Use the d.ASH SDK to develop applications for your own Spot from Boston Dynamics or any other robot you wish. This section of the d.ASH SDK documentation provides details about the components of the SDK.","title":"dConstruct d.ASH SDK"},{"location":"#autonomy-preparation","text":"There are 3 main components encompassing the d.ASH SDK: d.ASH Server ROS Driver d.ASH Autonomy Controller If you decide to use your own custom GUI in place of the d.ASH Autonomy Controller , or you do not want to run autonomy, you will still need to implement the d.ASH Server and the ROS Driver to operate your robot.","title":"Autonomy Preparation"},{"location":"#dash-server","text":"The d.ASH server acts as the main server responsible for sending control commands to the robot. At the same time, the d.ASH server also broadcasts secured data to any given remote systems.","title":"d.ASH Server"},{"location":"#ros-driver","text":"The ROS driver is a ROS node that has autonomy functions onboard to make your robot accessible from ROS. The ROS driver handles computational calls from any client and sends control commands to the d.ASH server. In turn, the d.ASH server relays the autonomy commands to the robot for execution.","title":"ROS Driver"},{"location":"#dash-autonomy-controller","text":"The d.ASH autonomy controller is the GUI (graphical user interface) for the d.ASH SDK. It encompasses the interactive visual components for d.ASH's software and displays different elements for users to interact with to control your robot.","title":"d.ASH Autonomy Controller"},{"location":"getting-started/UE-client/","text":"d.ASH Autonomy Controller As mentioned previously, the d.ASH autonomy controller is the GUI (graphical user interface) for the d.ASH SDK. It encompasses the interactive visual components for d.ASH's software and displays different elements for users to interact with to control your robot. This section of the d.ASH SDK documentation provides details about setting up the d.ASH autonomy controller, including information on ... 3.1 Main Components Main toolbar : Used to open other menus. Slider : Used to move floor grid up and down. Access mode : Used switch to mouse/keyboard mode. Navigation : The default mode uses the keys WASD to move camera and right click the mouse to zoom/tilt the camera. Waypoint creation : Used for adding waypoints to routes. Floor grid 3.2 Login Ensure login credentials match ... 3.3 Robot Connection Robots that are online and ready to be used, you can select which robot to connect to Robots that you have connected to in the client, you can select which robot to manipulate from this list Press to connect to the robot selected in the online list, the robot will then move to the connected list Press to disconnect from the robot in the connected list Init Pose: Tells the robot where its rough initial position is, draw the arrow by: 1. Click init pose 2. left clicking and dragging the mouse on the grid Follow: Toggle on to have the camera follow the selected dog 3.4 Routes Text box to enter route name to add Click to add route of given name Click to select a route Click to remove selected route Click to add waypoints to selected route Load/save all routes Segment number, use keypad \u00b1 to increment/decrement segment Robot Follow Route: Make the selected robot follow the selected route Add waypoints by clicking on the grid, you can use WASD + Right click mouse to manipulate the view. Exit waypoint mode by middle clicking the mouse Delete waypoints by clicking the waypoint Selected waypoint change to orange color Press del to remove Change elevation by moving the floor grid You can move floor grid in waypoint mode by pressing ctrl+mouse scroll You can adjust the the elevation of the waypoint by moving the grid Waypoint is created when you click on grid, to create elevated waypoints, move grid up/down then click. 3.5 Map Settings Low pass, voxels below this value is visible. Voxels in maps have elevation, by lowering low pass, voxels above the low pass will be cropped Notice that the ceiling voxels have now been cropped by reducing the low pass 3.6 Layer Visibility Toggles visibility of various items 3.7 Load Scans Scans from dash pack can be previewed here 1. Select your down sample size in metres, large value means lower quality, but faster loading 2. You can pick loaded point clouds to toggle translucency Translucent mode","title":"3.0 Setting up d.ASH Autonomy Controller"},{"location":"getting-started/UE-client/#dash-autonomy-controller","text":"As mentioned previously, the d.ASH autonomy controller is the GUI (graphical user interface) for the d.ASH SDK. It encompasses the interactive visual components for d.ASH's software and displays different elements for users to interact with to control your robot. This section of the d.ASH SDK documentation provides details about setting up the d.ASH autonomy controller, including information on ...","title":"d.ASH Autonomy Controller"},{"location":"getting-started/UE-client/#31-main-components","text":"Main toolbar : Used to open other menus. Slider : Used to move floor grid up and down. Access mode : Used switch to mouse/keyboard mode. Navigation : The default mode uses the keys WASD to move camera and right click the mouse to zoom/tilt the camera. Waypoint creation : Used for adding waypoints to routes. Floor grid","title":"3.1 Main Components"},{"location":"getting-started/UE-client/#32-login","text":"Ensure login credentials match ...","title":"3.2 Login"},{"location":"getting-started/UE-client/#33-robot-connection","text":"Robots that are online and ready to be used, you can select which robot to connect to Robots that you have connected to in the client, you can select which robot to manipulate from this list Press to connect to the robot selected in the online list, the robot will then move to the connected list Press to disconnect from the robot in the connected list Init Pose: Tells the robot where its rough initial position is, draw the arrow by: 1. Click init pose 2. left clicking and dragging the mouse on the grid Follow: Toggle on to have the camera follow the selected dog","title":"3.3 Robot Connection"},{"location":"getting-started/UE-client/#34-routes","text":"Text box to enter route name to add Click to add route of given name Click to select a route Click to remove selected route Click to add waypoints to selected route Load/save all routes Segment number, use keypad \u00b1 to increment/decrement segment Robot Follow Route: Make the selected robot follow the selected route Add waypoints by clicking on the grid, you can use WASD + Right click mouse to manipulate the view. Exit waypoint mode by middle clicking the mouse Delete waypoints by clicking the waypoint Selected waypoint change to orange color Press del to remove Change elevation by moving the floor grid You can move floor grid in waypoint mode by pressing ctrl+mouse scroll You can adjust the the elevation of the waypoint by moving the grid Waypoint is created when you click on grid, to create elevated waypoints, move grid up/down then click.","title":"3.4 Routes"},{"location":"getting-started/UE-client/#35-map-settings","text":"Low pass, voxels below this value is visible. Voxels in maps have elevation, by lowering low pass, voxels above the low pass will be cropped Notice that the ceiling voxels have now been cropped by reducing the low pass","title":"3.5 Map Settings"},{"location":"getting-started/UE-client/#36-layer-visibility","text":"Toggles visibility of various items","title":"3.6 Layer Visibility"},{"location":"getting-started/UE-client/#37-load-scans","text":"Scans from dash pack can be previewed here 1. Select your down sample size in metres, large value means lower quality, but faster loading 2. You can pick loaded point clouds to toggle translucency Translucent mode","title":"3.7 Load Scans"},{"location":"getting-started/config-connect/","text":"Configuring Sensors 2.1 Velodyne Driver The Velodyne Driver is a driver in the ROS package that provides basic device handling for Velodyne 3D LIDAR sensors. For more info, refer to this (insert link on how to set up) 2.1.1 Setting Up on Sensor By default, the Velodyne LIDAR sensor IP address is factory set on default value 192.168.1.201 . The d.ASH SDK will assume the default Velodyne IP address. 2.1.2 Setting Up on Personal Computer You'll need to configure a static IP address for your computer to use an address within the range 192.168.1.XXX where XXX may be any integer from 2 to 254, except 201 (which is the LIDAR\u2019s IP). For example, an appropriate static IP address for your compute could be 192.168.1.100 . 2.2 Ouster Driver 2.2.1 Setting Up on Sensor By default, the Ouster LIDAR sensor IP address is factory set on your IPv6/IPv4 link-local address. The addresses lie within the block 169.254.0.0 to 169.254.255.255 . To change the static IP address for Ouster, refer to the Ouster Documentation . It is recommended to set up your own static IP address. 2.2.2 Setting Up on Personal Computer You'll need to configure a static IP address for your computer to use an address within the range 192.0.2.XXX where XXX may be any integer from 2 to 254. For example, an appropriate static IP address for your compute could be 192.0.2.123 .","title":"2.0 Configuring Sensors"},{"location":"getting-started/config-connect/#configuring-sensors","text":"","title":"Configuring Sensors"},{"location":"getting-started/config-connect/#21-velodyne-driver","text":"The Velodyne Driver is a driver in the ROS package that provides basic device handling for Velodyne 3D LIDAR sensors. For more info, refer to this (insert link on how to set up)","title":"2.1 Velodyne Driver"},{"location":"getting-started/config-connect/#211-setting-up-on-sensor","text":"By default, the Velodyne LIDAR sensor IP address is factory set on default value 192.168.1.201 . The d.ASH SDK will assume the default Velodyne IP address.","title":"2.1.1 Setting Up on Sensor"},{"location":"getting-started/config-connect/#212-setting-up-on-personal-computer","text":"You'll need to configure a static IP address for your computer to use an address within the range 192.168.1.XXX where XXX may be any integer from 2 to 254, except 201 (which is the LIDAR\u2019s IP). For example, an appropriate static IP address for your compute could be 192.168.1.100 .","title":"2.1.2 Setting Up on Personal Computer"},{"location":"getting-started/config-connect/#22-ouster-driver","text":"","title":"2.2 Ouster Driver"},{"location":"getting-started/config-connect/#221-setting-up-on-sensor","text":"By default, the Ouster LIDAR sensor IP address is factory set on your IPv6/IPv4 link-local address. The addresses lie within the block 169.254.0.0 to 169.254.255.255 . To change the static IP address for Ouster, refer to the Ouster Documentation . It is recommended to set up your own static IP address.","title":"2.2.1 Setting Up on Sensor"},{"location":"getting-started/config-connect/#222-setting-up-on-personal-computer","text":"You'll need to configure a static IP address for your computer to use an address within the range 192.0.2.XXX where XXX may be any integer from 2 to 254. For example, an appropriate static IP address for your compute could be 192.0.2.123 .","title":"2.2.2 Setting Up on Personal Computer"},{"location":"getting-started/config-spot/","text":"Configuring Spot To configure Spot, you will need to set up on the robot itself and on your personal computer. For further enquiries of setting up Spot, follow Boston Dynamics Documentation . 1.1 Setting Up On Spot By default, user and admin credentials are printed on a label in the robot's battery compartment. Otherwise, you can create your own account through the admin console by creating a user with admin privileges. Remember your credentials! Remember your Spot credentials as you will need those same credentials to set up the next section on your personal computer. 1.2 Setting Up On PC By default, the Spot robot IP address is 10.0.0.3 . If you have more than one Spot robot, refer to the Boston Dynamics Documentation to use the admin console to change the default IP of additional robots to avoid address conflicts. You'll need to configure a static IP address for your computer to use an address within the range 10.0.0.X where X may be any integer from 2 to 254, except 3 (which is the Spot's IP). For example, an appropriate static IP address for your compute could be 10.0.0.100 . You will then be asked to enter a valid admin or operator username and password.","title":"1.0 Configuring Spot"},{"location":"getting-started/config-spot/#configuring-spot","text":"To configure Spot, you will need to set up on the robot itself and on your personal computer. For further enquiries of setting up Spot, follow Boston Dynamics Documentation .","title":"Configuring Spot"},{"location":"getting-started/config-spot/#11-setting-up-on-spot","text":"By default, user and admin credentials are printed on a label in the robot's battery compartment. Otherwise, you can create your own account through the admin console by creating a user with admin privileges. Remember your credentials! Remember your Spot credentials as you will need those same credentials to set up the next section on your personal computer.","title":"1.1 Setting Up On Spot"},{"location":"getting-started/config-spot/#12-setting-up-on-pc","text":"By default, the Spot robot IP address is 10.0.0.3 . If you have more than one Spot robot, refer to the Boston Dynamics Documentation to use the admin console to change the default IP of additional robots to avoid address conflicts. You'll need to configure a static IP address for your computer to use an address within the range 10.0.0.X where X may be any integer from 2 to 254, except 3 (which is the Spot's IP). For example, an appropriate static IP address for your compute could be 10.0.0.100 . You will then be asked to enter a valid admin or operator username and password.","title":"1.2 Setting Up On PC"},{"location":"getting-started/localization/","text":"Localization When you first start the d.ASH SDK, you need to give an initial estimation of the robot's post on the map. To do so, use the UE client to send the initial post. (more info can be found in the UE client guide)","title":"5.0 Localisation"},{"location":"getting-started/localization/#localization","text":"When you first start the d.ASH SDK, you need to give an initial estimation of the robot's post on the map. To do so, use the UE client to send the initial post. (more info can be found in the UE client guide)","title":"Localization"},{"location":"getting-started/map-loading/","text":"Map Loading This section of the d.ASH SDK documentation provides details about file organisation of autonomy maps for the d.ASH SDK. To load a new map, upload the autonomy map files in the following location: ~/.data/maps/<MAP_NAME> For example, if your map is outdoor_map.pcd , ~/.data/maps/outdoor_map Within that folder, ensure the following files are in the folder: 2D Autonomy Map: <MAP_NAME>.png 3D Autonomy Map: <MAP_NAME>.pcd Global Planner Configuration: <MAP_NAME>.json To activate the new map, ensure the map name in autoConfig.json file matches . \"map_name\": \"outdoor_map\",","title":"4.0 Map Loading"},{"location":"getting-started/map-loading/#map-loading","text":"This section of the d.ASH SDK documentation provides details about file organisation of autonomy maps for the d.ASH SDK. To load a new map, upload the autonomy map files in the following location: ~/.data/maps/<MAP_NAME> For example, if your map is outdoor_map.pcd , ~/.data/maps/outdoor_map Within that folder, ensure the following files are in the folder: 2D Autonomy Map: <MAP_NAME>.png 3D Autonomy Map: <MAP_NAME>.pcd Global Planner Configuration: <MAP_NAME>.json To activate the new map, ensure the map name in autoConfig.json file matches . \"map_name\": \"outdoor_map\",","title":"Map Loading"},{"location":"getting-started/waypoint/","text":"Waypoint and Recoding Data is sent using the UE client. 1) More info refer to UE client guide 2) Another method is to write your own code by subscribing to the topic (krittin to give topic name) (we accept data in following format\u2026) nav_msgs/Path","title":"6.0 Waypoint recording and sending"},{"location":"getting-started/waypoint/#waypoint-and-recoding","text":"Data is sent using the UE client. 1) More info refer to UE client guide 2) Another method is to write your own code by subscribing to the topic (krittin to give topic name) (we accept data in following format\u2026) nav_msgs/Path","title":"Waypoint and Recoding"},{"location":"sdk-config/auto-config/","text":"Auto Configuration This section of the d.ASH SDK documentation provides details about the configuration file for the robot autoConfig.json . Information in this section includes variable and definitions to configure autonomy. 2.1 Config File { \"py_address\" : \"0.0.0.0:50051\" , \"ue_address\" : \"0.0.0.0:50052\" , \"ssl\" : true , \"motion_planner\" : true , \"localization\" : true , \"sim_mode\" : false , \"send_data_gui\" : true , \"camera\" : \"RealsenseCam\" , \"retrieveImg\" : false , \"map_name\" : \"office_lvl4\" , \"pc_topic\" : \"velodyne_points\" , \"odom_topic\" : \"odom\" , \"controller\" :{ \"linear_window\" : 0.5 , \"linear_min_v\" : 0.0 , \"linear_max_v\" : 0.8 , \"angular_max_w\" : 3.142 , \"linear_max_a\" : 1.0 , \"angular_max_a\" : 5.0 , \"robot_width\" : 0.4 , \"robot_length\" : 1.0 , \"obstacle_cost_gains\" : 3.0 , \"speed_cost_gains\" : 1.0 , \"goal_cost_gains\" : 4.0 , \"angular_speed_cost_scaling_factor\" : 0.1 , \"linear_num_window_steps\" : 50 , \"angular_num_window_steps\" : 30 , \"prediction_window\" : 5.0 , \"costmap_size\" : 20.0 , \"costmap_scale\" : 0.1 , \"max_pc_height\" : 0.2 , \"min_pc_height\" : - 0.5 , \"x_filter\" :[ - 0.2 , 0.2 ], \"y_filter\" :[ - 0.1 , 0.1 ], \"costmap_obs_inflation\" : 1.0 , \"occ_obs_deadzone\" : 0.2 , \"dt\" : 0.1 , \"visualise\" : false }, \"state_estimator\" :{ \"initial_x\" : - 7.7 , \"initial_y\" : - 14.5 , \"initial_z\" : 1.0 , \"initial_w\" : - 0.177 , \"kImuTopic\" : \"imu\" , \"kPoseTopic\" : \"mcl_pose\" , \"ktfUpdate\" : 0.02 , \"kStatusUpdate\" : 1.0 , \"kLoggingUpdate\" : 15.0 , \"kposeDiffmax\" : 5.0 , \"KUse_imu_ori\" : false , \"kBadCovThres\" : 2.0 , \"kGoodCovThres\" : 0.7 , \"kCovBadMax\" : 10 , \"kCovGoodtMax\" : 5 , \"kFilter_z\" : true , \"klimit_min\" : - 0.3 , \"klimit_max\" : 5.0 }, \"planner\" :{ \"lookAheadIndex\" : 15 , \"enable_self_rotate\" : false , \"self_rotation_speed\" : 0.5 , \"self_rotation_speed_final\" : 0.3 , \"dis_threshold\" : 0.5 , \"theta_threshold\" : 0.2 , \"cmd_Smoothing\" : true , } } 2.2 Definitions 2.2.1 Main py_address : The address of the d.ASH server in the formal <IP>:<PORT> . ue_address : The address of the GUI server in the formal <IP>:<PORT> . ssl : Enables secure SSL messaging and encryption. motion_planner : Enables autonomy motion planning. localization : Enables robot localisation, returning users position and orientation in relation to map. sim_mode : Enables Spot odometry retrieval. send_data_gui : Enables ability to send data to GUI server for visualisation. camera : Camera active for the current session to retrieve data ie. RealsenseCam, TestCam . retrieveImg : Enables image retrieval. map_name : Map name used for autonomy (as mentioned in File Organisation ). pc_topic : ROS point cloud topic name for subscribing. odom_topic : ROS odometry topic name for subscribing. 2.2.2 Controller linear_window : Sets DWA (dynamic window approach) size For the following parameters, ensure the value is within limits of the robot. linear_min_v : Sets minimum linear velocity for autonomy. linear_max_v : Sets maximum linear velocity for autonomy. angular_max_w : Sets maximum angular velocity for autonomy. linear_max_a : Sets maximum linear acceleration for autonomy. angular_max_a : Sets maximum angular acceleration for autonomy. For the following parameters, ensure the vlaues are align with the robot as per its documentation. robot_width : Reflects width of robot. robot_length : Reflects the length of robot. obstacle_cost_gains : Sets weight for an obstacle course based on the weighted sum of the map. speed_cost_gains : Sets weight for speed cost. goal_cost_gains : Sets weight for goal cost. angular_speed_cost_scaling_factor : Sets weight for angular velocity. Note that a higher value of the variable discourages the robot from turning. Note that a higher value of the variable slows down the computations. linear_num_window_steps : Sets number of linear velocity values to consider. angular_num_window_steps : Sets number of angular velocity values to consider. prediction_window : Sets prediction horizion (in seconds). costmap_size : Sets local costmap size (in meters). costmap_scale : Sets scale to convert map from meter to pixels. Note that the point cloud height is measured from the center of the lidar. If the ground is detected, it will be considered as an obstacle. Therefore, set the minimum value to be above the ground. max_pc_height : Sets maximum point cloud height to be considered as an obstacle. min_pc_height : Sets minimum point cloud height to be considered as an obstacle. Do not remove too much from the point cloud filter as obstacles around the robot might not be considered. x_filter : Sets vector of size 2 consisting the minimum and maximum x-value of point cloud to be removed. y_filter : Sets vector of size 2 consisting the minimum and maximum y-value of point cloud to be removed. Note that a higher value of the variable results in more conservative planning. costmap_obs_inflation : Sets inflation radius of obstacles to be considered in planning. occ_obs_deadzone : Sets minimum distances from obstacles and robots for autonomy. dt : Sets timestep. Note that a higher timestamp slows down the computation. visualise : Enables visualisation of costmap. This is used only for debugging. 2.2.3 State Estimator initial_x : Sets initialization of x-axis for localizaition (in meters). initial_y : Sets initialization of y-axis for localizaition (in meters). initial_z : Sets initialization of z-axis for localizaition (in meters). initial_w : Sets initialization of orientation for localizaition. kImuTopic : ROS IMU (Inertial Measurement Unit) topic name for subscribing. kPoseTopic : Enables localization result. ktfUpdate : Sets ROS tf publishing frequency. kStatusUpdate : Sets localisation status of publishing frequency. kLoggingUpdate : Sets data logging period. kposeDiffmax : Sets the maximum distance between two consecutive pose estimation. KUse_imu_ori : Enables IMU (Inertial Measurement Unit) or odom orientation for odometry estimation. If this variable is set to true, ensure kImuTopic is available. kBadCovThres : Sets localization quality. kGoodCovThres : Sets localization quality. kCovBadMax : Sets localization quality. kCovGoodtMax : Sets localization quality. kFilter_z : Enables pass through filter application for localization. klimit_min : Sets minimum range of pass through filter. klimit_max : Sets maximum range of pass through filter. 2.2.4 Planner lookAheadIndexv : Sets look-ahead index from the nearest waypoint for path to follow. Note that a lower index slows down the movement of the robot. Similarly, a higher index results in the robot not follow path properly. enable_self_rotate : Enables one round of rotation around the robot itself before performing autonomy. This is to ensure that localisation is working before starting autonomy. self_rotation_speed : Sets angular velocity of robot to turn around itself before performing autonomy (in radiants/second). self_rotation_speed_final : Sets angular velocity of robot to turn around itself after performing autonomy (in radiants/second). This ensures that the final orientation of robot aligns with its goal. Note that a smaller threshold discourages the robot from determing if it has reached its goal. dis_threshold : Sets maximum euclidean distance from the robot to the final goal for destination to be considered having reached its goal. theta_threshold : Sets maximum orientation distance from the robot to the final goal for destination to be considered having reached its goal. cmd_Smoothing : Enables smoothing control commands.","title":"2.0 Auto Configuration"},{"location":"sdk-config/auto-config/#auto-configuration","text":"This section of the d.ASH SDK documentation provides details about the configuration file for the robot autoConfig.json . Information in this section includes variable and definitions to configure autonomy.","title":"Auto Configuration"},{"location":"sdk-config/auto-config/#21-config-file","text":"{ \"py_address\" : \"0.0.0.0:50051\" , \"ue_address\" : \"0.0.0.0:50052\" , \"ssl\" : true , \"motion_planner\" : true , \"localization\" : true , \"sim_mode\" : false , \"send_data_gui\" : true , \"camera\" : \"RealsenseCam\" , \"retrieveImg\" : false , \"map_name\" : \"office_lvl4\" , \"pc_topic\" : \"velodyne_points\" , \"odom_topic\" : \"odom\" , \"controller\" :{ \"linear_window\" : 0.5 , \"linear_min_v\" : 0.0 , \"linear_max_v\" : 0.8 , \"angular_max_w\" : 3.142 , \"linear_max_a\" : 1.0 , \"angular_max_a\" : 5.0 , \"robot_width\" : 0.4 , \"robot_length\" : 1.0 , \"obstacle_cost_gains\" : 3.0 , \"speed_cost_gains\" : 1.0 , \"goal_cost_gains\" : 4.0 , \"angular_speed_cost_scaling_factor\" : 0.1 , \"linear_num_window_steps\" : 50 , \"angular_num_window_steps\" : 30 , \"prediction_window\" : 5.0 , \"costmap_size\" : 20.0 , \"costmap_scale\" : 0.1 , \"max_pc_height\" : 0.2 , \"min_pc_height\" : - 0.5 , \"x_filter\" :[ - 0.2 , 0.2 ], \"y_filter\" :[ - 0.1 , 0.1 ], \"costmap_obs_inflation\" : 1.0 , \"occ_obs_deadzone\" : 0.2 , \"dt\" : 0.1 , \"visualise\" : false }, \"state_estimator\" :{ \"initial_x\" : - 7.7 , \"initial_y\" : - 14.5 , \"initial_z\" : 1.0 , \"initial_w\" : - 0.177 , \"kImuTopic\" : \"imu\" , \"kPoseTopic\" : \"mcl_pose\" , \"ktfUpdate\" : 0.02 , \"kStatusUpdate\" : 1.0 , \"kLoggingUpdate\" : 15.0 , \"kposeDiffmax\" : 5.0 , \"KUse_imu_ori\" : false , \"kBadCovThres\" : 2.0 , \"kGoodCovThres\" : 0.7 , \"kCovBadMax\" : 10 , \"kCovGoodtMax\" : 5 , \"kFilter_z\" : true , \"klimit_min\" : - 0.3 , \"klimit_max\" : 5.0 }, \"planner\" :{ \"lookAheadIndex\" : 15 , \"enable_self_rotate\" : false , \"self_rotation_speed\" : 0.5 , \"self_rotation_speed_final\" : 0.3 , \"dis_threshold\" : 0.5 , \"theta_threshold\" : 0.2 , \"cmd_Smoothing\" : true , } }","title":"2.1 Config File"},{"location":"sdk-config/auto-config/#22-definitions","text":"","title":"2.2 Definitions"},{"location":"sdk-config/auto-config/#221-main","text":"py_address : The address of the d.ASH server in the formal <IP>:<PORT> . ue_address : The address of the GUI server in the formal <IP>:<PORT> . ssl : Enables secure SSL messaging and encryption. motion_planner : Enables autonomy motion planning. localization : Enables robot localisation, returning users position and orientation in relation to map. sim_mode : Enables Spot odometry retrieval. send_data_gui : Enables ability to send data to GUI server for visualisation. camera : Camera active for the current session to retrieve data ie. RealsenseCam, TestCam . retrieveImg : Enables image retrieval. map_name : Map name used for autonomy (as mentioned in File Organisation ). pc_topic : ROS point cloud topic name for subscribing. odom_topic : ROS odometry topic name for subscribing.","title":"2.2.1 Main"},{"location":"sdk-config/auto-config/#222-controller","text":"linear_window : Sets DWA (dynamic window approach) size For the following parameters, ensure the value is within limits of the robot. linear_min_v : Sets minimum linear velocity for autonomy. linear_max_v : Sets maximum linear velocity for autonomy. angular_max_w : Sets maximum angular velocity for autonomy. linear_max_a : Sets maximum linear acceleration for autonomy. angular_max_a : Sets maximum angular acceleration for autonomy. For the following parameters, ensure the vlaues are align with the robot as per its documentation. robot_width : Reflects width of robot. robot_length : Reflects the length of robot. obstacle_cost_gains : Sets weight for an obstacle course based on the weighted sum of the map. speed_cost_gains : Sets weight for speed cost. goal_cost_gains : Sets weight for goal cost. angular_speed_cost_scaling_factor : Sets weight for angular velocity. Note that a higher value of the variable discourages the robot from turning. Note that a higher value of the variable slows down the computations. linear_num_window_steps : Sets number of linear velocity values to consider. angular_num_window_steps : Sets number of angular velocity values to consider. prediction_window : Sets prediction horizion (in seconds). costmap_size : Sets local costmap size (in meters). costmap_scale : Sets scale to convert map from meter to pixels. Note that the point cloud height is measured from the center of the lidar. If the ground is detected, it will be considered as an obstacle. Therefore, set the minimum value to be above the ground. max_pc_height : Sets maximum point cloud height to be considered as an obstacle. min_pc_height : Sets minimum point cloud height to be considered as an obstacle. Do not remove too much from the point cloud filter as obstacles around the robot might not be considered. x_filter : Sets vector of size 2 consisting the minimum and maximum x-value of point cloud to be removed. y_filter : Sets vector of size 2 consisting the minimum and maximum y-value of point cloud to be removed. Note that a higher value of the variable results in more conservative planning. costmap_obs_inflation : Sets inflation radius of obstacles to be considered in planning. occ_obs_deadzone : Sets minimum distances from obstacles and robots for autonomy. dt : Sets timestep. Note that a higher timestamp slows down the computation. visualise : Enables visualisation of costmap. This is used only for debugging.","title":"2.2.2 Controller"},{"location":"sdk-config/auto-config/#223-state-estimator","text":"initial_x : Sets initialization of x-axis for localizaition (in meters). initial_y : Sets initialization of y-axis for localizaition (in meters). initial_z : Sets initialization of z-axis for localizaition (in meters). initial_w : Sets initialization of orientation for localizaition. kImuTopic : ROS IMU (Inertial Measurement Unit) topic name for subscribing. kPoseTopic : Enables localization result. ktfUpdate : Sets ROS tf publishing frequency. kStatusUpdate : Sets localisation status of publishing frequency. kLoggingUpdate : Sets data logging period. kposeDiffmax : Sets the maximum distance between two consecutive pose estimation. KUse_imu_ori : Enables IMU (Inertial Measurement Unit) or odom orientation for odometry estimation. If this variable is set to true, ensure kImuTopic is available. kBadCovThres : Sets localization quality. kGoodCovThres : Sets localization quality. kCovBadMax : Sets localization quality. kCovGoodtMax : Sets localization quality. kFilter_z : Enables pass through filter application for localization. klimit_min : Sets minimum range of pass through filter. klimit_max : Sets maximum range of pass through filter.","title":"2.2.3 State Estimator"},{"location":"sdk-config/auto-config/#224-planner","text":"lookAheadIndexv : Sets look-ahead index from the nearest waypoint for path to follow. Note that a lower index slows down the movement of the robot. Similarly, a higher index results in the robot not follow path properly. enable_self_rotate : Enables one round of rotation around the robot itself before performing autonomy. This is to ensure that localisation is working before starting autonomy. self_rotation_speed : Sets angular velocity of robot to turn around itself before performing autonomy (in radiants/second). self_rotation_speed_final : Sets angular velocity of robot to turn around itself after performing autonomy (in radiants/second). This ensures that the final orientation of robot aligns with its goal. Note that a smaller threshold discourages the robot from determing if it has reached its goal. dis_threshold : Sets maximum euclidean distance from the robot to the final goal for destination to be considered having reached its goal. theta_threshold : Sets maximum orientation distance from the robot to the final goal for destination to be considered having reached its goal. cmd_Smoothing : Enables smoothing control commands.","title":"2.2.4 Planner"},{"location":"sdk-config/rest-config/","text":"Rest Configuration This section of the d.ASH SDK documentation provides details about the configuration file for the rest server - restConfig.json . Information in this section includes variable and definitions to configure the rest server. 1.1 Config File { \"port\" : 3000 , \"certFilename\" : \"./cert.pem\" , \"keyFilename\" : \"./key.pem\" , \"dhParamsFilename\" : \"\" , \"robotRegisterNativeCert\" : true , \"activeIPIdx\" : 1 , \"preferredIP\" : \"10.8.0.5\" , \"runCmds\" : { \"py_server\" : { \"cmdStr\" : \"python ./spotServer.py ./configs/robotDeployConfig.json <!TOKEN!>\" , \"cmdPath\" : \"C:/Users/kestr/Documents/Projects/dc/dash_code/py_server\" } } }","title":"Rest Configuration"},{"location":"sdk-config/rest-config/#rest-configuration","text":"This section of the d.ASH SDK documentation provides details about the configuration file for the rest server - restConfig.json . Information in this section includes variable and definitions to configure the rest server.","title":"Rest Configuration"},{"location":"sdk-config/rest-config/#11-config-file","text":"{ \"port\" : 3000 , \"certFilename\" : \"./cert.pem\" , \"keyFilename\" : \"./key.pem\" , \"dhParamsFilename\" : \"\" , \"robotRegisterNativeCert\" : true , \"activeIPIdx\" : 1 , \"preferredIP\" : \"10.8.0.5\" , \"runCmds\" : { \"py_server\" : { \"cmdStr\" : \"python ./spotServer.py ./configs/robotDeployConfig.json <!TOKEN!>\" , \"cmdPath\" : \"C:/Users/kestr/Documents/Projects/dc/dash_code/py_server\" } } }","title":"1.1 Config File"},{"location":"sdk-config/robot-config/","text":"Robot Configuration This section of the d.ASH SDK documentation provides details about the configuration file for the robot robotConfig.json . Information in this section includes variable and definitions used to configure the d.ASH server . 1.1 Config File { \"serverAddress\" : \"localhost:50051\" , \"robotHostname\" : \"192.168.80.3\" , \"username\" : \"user5\" , \"camList\" : [ \"RealsenseCam\" ], \"payloads\" : [], \"dataStateLogFolder\" : \"G:/Temp/logs\" , \"ssl\" : true , \"fastServer\" : false , \"fastServerHostname\" : \"localhost:7777\" , \"secureDefaultToken\" : false , \"testMode\" : true , \"withAudio\" : true , \"realSenseConfig\" : { \"test\" : true , \"testFilenames\" : [ \"../../test_videos/nus_left.mp4\" , \"../../test_videos/nus_center.mp4\" , \"../../test_videos/nus_right.mp4\" ], \"flipOptions\" : { \"0\" : [ false , false ], \"1\" : [ true , true ], \"2\" : [ false , false ] }, \"baseWidth\" : 640 , \"baseHeight\" : 480 , \"codec\" : \"video\" , \"width\" : 320 , \"height\" : 240 , \"bitrate\" : 3600000 } } 1.2 Definitions 1.2.1 Main serverAddress : Sets address of the spotServer in <HOSTNAME>:<PORT> format. robotHostname : Sets hostname of the Spot to connect to robot's IP. username : Sets username for d.ASH server credentials. camList : Sets a list of cameras active for the current session. payloads : Optional payloads list. dataStateLogFolder : Sets folder to write out the recorded msgpack data of the robot. ssl : Enables secure SSL messaging and encryption. testMode : Enables the Spot server to enter into test mode. withAudio : Enables audio streaming playback. 1.2.2 Intel RealSense Configuration test : Enables simulation of camera streaming via provided custom mp4 video files specified as a list in testFilenames . testFilenames : List of test files. flipOptions : Specify how each camera flips long the x-axis and y-axis following the format {\"index\" : [x-flip, y-flip]} baseWidth : Sets processing width of the camera stream. baseHeight : Sets the processing height of the camera stream. Video will be processed at this base resolution before being resized via width and height . Use these variables to change the actual processed resolution for power/efficiency considerations of the RealSense devices. Note that a minimum baseWidth of 640 and a minimum baseHeight of 360 is required. codec : Sets jpg/video options, with jpg being regular jpeg encoding and video using VP9 encoding. width : Adjusts the final returned/resized width dimensions of the input camera stream height : Adjusts the final returned/resized height dimensions of the input camera stream bitrate : This is the quality of the video encoding [only applies to video streaming] Note for HD Streaming, RealSense requires a high bitrate of 3600000.","title":"1.0 Robot Configuration"},{"location":"sdk-config/robot-config/#robot-configuration","text":"This section of the d.ASH SDK documentation provides details about the configuration file for the robot robotConfig.json . Information in this section includes variable and definitions used to configure the d.ASH server .","title":"Robot Configuration"},{"location":"sdk-config/robot-config/#11-config-file","text":"{ \"serverAddress\" : \"localhost:50051\" , \"robotHostname\" : \"192.168.80.3\" , \"username\" : \"user5\" , \"camList\" : [ \"RealsenseCam\" ], \"payloads\" : [], \"dataStateLogFolder\" : \"G:/Temp/logs\" , \"ssl\" : true , \"fastServer\" : false , \"fastServerHostname\" : \"localhost:7777\" , \"secureDefaultToken\" : false , \"testMode\" : true , \"withAudio\" : true , \"realSenseConfig\" : { \"test\" : true , \"testFilenames\" : [ \"../../test_videos/nus_left.mp4\" , \"../../test_videos/nus_center.mp4\" , \"../../test_videos/nus_right.mp4\" ], \"flipOptions\" : { \"0\" : [ false , false ], \"1\" : [ true , true ], \"2\" : [ false , false ] }, \"baseWidth\" : 640 , \"baseHeight\" : 480 , \"codec\" : \"video\" , \"width\" : 320 , \"height\" : 240 , \"bitrate\" : 3600000 } }","title":"1.1 Config File"},{"location":"sdk-config/robot-config/#12-definitions","text":"","title":"1.2 Definitions"},{"location":"sdk-config/robot-config/#121-main","text":"serverAddress : Sets address of the spotServer in <HOSTNAME>:<PORT> format. robotHostname : Sets hostname of the Spot to connect to robot's IP. username : Sets username for d.ASH server credentials. camList : Sets a list of cameras active for the current session. payloads : Optional payloads list. dataStateLogFolder : Sets folder to write out the recorded msgpack data of the robot. ssl : Enables secure SSL messaging and encryption. testMode : Enables the Spot server to enter into test mode. withAudio : Enables audio streaming playback.","title":"1.2.1 Main"},{"location":"sdk-config/robot-config/#122-intel-realsense-configuration","text":"test : Enables simulation of camera streaming via provided custom mp4 video files specified as a list in testFilenames . testFilenames : List of test files. flipOptions : Specify how each camera flips long the x-axis and y-axis following the format {\"index\" : [x-flip, y-flip]} baseWidth : Sets processing width of the camera stream. baseHeight : Sets the processing height of the camera stream. Video will be processed at this base resolution before being resized via width and height . Use these variables to change the actual processed resolution for power/efficiency considerations of the RealSense devices. Note that a minimum baseWidth of 640 and a minimum baseHeight of 360 is required. codec : Sets jpg/video options, with jpg being regular jpeg encoding and video using VP9 encoding. width : Adjusts the final returned/resized width dimensions of the input camera stream height : Adjusts the final returned/resized height dimensions of the input camera stream bitrate : This is the quality of the video encoding [only applies to video streaming] Note for HD Streaming, RealSense requires a high bitrate of 3600000.","title":"1.2.2 Intel RealSense Configuration"},{"location":"setup/dash-server/","text":"Setting Up d.ASH Server As mentioned previously, the d.ASH server acts as a secured py-server responsible for sending control commands to the robot and for broadcasting data to any given remote systems. This section of the d.ASH SDK documentation provides details about setting up the d.ASH server. Information in this section includes python requirements, compiling, and testing. Run https://bitbucket.org/dconstruct/dash_code/src/master/py_server/cython/configLibs.py to install d.ASH server dependencies 3.1 Import Compiled Server In the file robotHAL.py , we need to make sure you are importing the compiled py_server C++ library: # sys.path.append('G:/Builds/testPyServer_Build/RelWithDebInfo') $ sys . path . append ( 'C:/Users/kestr/Documents/Projects/Builds/dc/py_server_build/RelWithDebInfo' ) # Change this to your built path Now, in realSenseCameras.py , we need to make sure you have also compiled the py_realsense_node C++ library: $ sys . path . append ( 'C:/Users/kestr/Documents/Projects/Builds/dc/py_realsense_node_build/RelWithDebInfo' ) # Change this to your built path 3.2 Python Requirements The d.ASH SDK works with Python 3.7 . To properly run the server, you will also need to install the following dependencies - a python package installer and a python environment management system. 3.2.1 Pip Installation Pip is a package installer for Python. The d.ASH SDK and the third-party packages used by many of its programming examples use pip to install. Check if pip is installed by requesting its version: $ python3 - m pip -- version pip 19.2.1 from < PATH_ON_YOUR_COMPUTER > If pip is not found, you\u2019ll need to install pip . Otherwise, install the following packages using pip: $ python3 .7 - m pip install pillow $ python3 .7 - m pip install opencv - python $ python3 .7 - m pip install bosdyn - client bosdyn - mission bosdyn - choreography - client $ python3 .7 - m pip install keyring $ python3 .7 - m pip install secretstorage $ python3 .7 - m pip install keyrings . alt It is recommended that you install an environment for Python. There are two ways to set up the Python 3.7 environment: via Conda or apt-get . 3.2.2 Conda Installation Conda is an open source package management system and environment management system that runs on Windows, macOS and Linux. Conda quickly installs, runs and updates packages and their dependencies. First, install Conda . Then, to set up the new environment, execute the following command: $ conda create --name py37 python=3.7 3.2.3 apt-get If Conda is not installed, you can choose to use apt-get to an environment for Python. Installed in Ubuntu and any Ubuntu-based Linux distribution, apt-get is tool for installing, upgrading, and cleaning packages. To set up the new environment, execute the following command: $ sudo apt-get install -y python3.7-dev 3.3 Intel RealSense Intel RealSense is an RGB camera with channels designed for depth perception capabilities. You can configure custom settings for any Intel RealSense cameras attached to the system to stream images to remote clients. You can do so by providing a config file in the same folder as where you launched d.ASH server. The config file needs to be named as realSenseConfig.json . 3.4 Testing Your Server To test your server, you'll firstly need to run the d.ASH server by entering the following command: $ python3 .7 ./ spotServer . py robotConfig . json Now that your d.ASH server is running, you will need to connect the server with the pilot_client . This will allow any available cameras to show up as options on your screen. To connect to the pilot client, ... Finally, try switching to the test camera streaming and verify the test camera is streaming properly.","title":"3.0 Setting up d.ASH Server"},{"location":"setup/dash-server/#setting-up-dash-server","text":"As mentioned previously, the d.ASH server acts as a secured py-server responsible for sending control commands to the robot and for broadcasting data to any given remote systems. This section of the d.ASH SDK documentation provides details about setting up the d.ASH server. Information in this section includes python requirements, compiling, and testing. Run https://bitbucket.org/dconstruct/dash_code/src/master/py_server/cython/configLibs.py to install d.ASH server dependencies","title":"Setting Up d.ASH Server"},{"location":"setup/dash-server/#31-import-compiled-server","text":"In the file robotHAL.py , we need to make sure you are importing the compiled py_server C++ library: # sys.path.append('G:/Builds/testPyServer_Build/RelWithDebInfo') $ sys . path . append ( 'C:/Users/kestr/Documents/Projects/Builds/dc/py_server_build/RelWithDebInfo' ) # Change this to your built path Now, in realSenseCameras.py , we need to make sure you have also compiled the py_realsense_node C++ library: $ sys . path . append ( 'C:/Users/kestr/Documents/Projects/Builds/dc/py_realsense_node_build/RelWithDebInfo' ) # Change this to your built path","title":"3.1 Import Compiled Server"},{"location":"setup/dash-server/#32-python-requirements","text":"The d.ASH SDK works with Python 3.7 . To properly run the server, you will also need to install the following dependencies - a python package installer and a python environment management system.","title":"3.2 Python Requirements"},{"location":"setup/dash-server/#321-pip-installation","text":"Pip is a package installer for Python. The d.ASH SDK and the third-party packages used by many of its programming examples use pip to install. Check if pip is installed by requesting its version: $ python3 - m pip -- version pip 19.2.1 from < PATH_ON_YOUR_COMPUTER > If pip is not found, you\u2019ll need to install pip . Otherwise, install the following packages using pip: $ python3 .7 - m pip install pillow $ python3 .7 - m pip install opencv - python $ python3 .7 - m pip install bosdyn - client bosdyn - mission bosdyn - choreography - client $ python3 .7 - m pip install keyring $ python3 .7 - m pip install secretstorage $ python3 .7 - m pip install keyrings . alt It is recommended that you install an environment for Python. There are two ways to set up the Python 3.7 environment: via Conda or apt-get .","title":"3.2.1 Pip Installation"},{"location":"setup/dash-server/#322-conda-installation","text":"Conda is an open source package management system and environment management system that runs on Windows, macOS and Linux. Conda quickly installs, runs and updates packages and their dependencies. First, install Conda . Then, to set up the new environment, execute the following command: $ conda create --name py37 python=3.7","title":"3.2.2 Conda Installation"},{"location":"setup/dash-server/#323-apt-get","text":"If Conda is not installed, you can choose to use apt-get to an environment for Python. Installed in Ubuntu and any Ubuntu-based Linux distribution, apt-get is tool for installing, upgrading, and cleaning packages. To set up the new environment, execute the following command: $ sudo apt-get install -y python3.7-dev","title":"3.2.3 apt-get"},{"location":"setup/dash-server/#33-intel-realsense","text":"Intel RealSense is an RGB camera with channels designed for depth perception capabilities. You can configure custom settings for any Intel RealSense cameras attached to the system to stream images to remote clients. You can do so by providing a config file in the same folder as where you launched d.ASH server. The config file needs to be named as realSenseConfig.json .","title":"3.3 Intel RealSense"},{"location":"setup/dash-server/#34-testing-your-server","text":"To test your server, you'll firstly need to run the d.ASH server by entering the following command: $ python3 .7 ./ spotServer . py robotConfig . json Now that your d.ASH server is running, you will need to connect the server with the pilot_client . This will allow any available cameras to show up as options on your screen. To connect to the pilot client, ... Finally, try switching to the test camera streaming and verify the test camera is streaming properly.","title":"3.4 Testing Your Server"},{"location":"setup/desktop-dep/","text":"Installing Dependencies on the Desktop While most of the d.ASH SDK build is hermetic, some system dependencies on the Desktop are required - Linux Ubuntu 18.04 LTS and ROS Melodic . This section of the d.ASH SDK documentation provides details for both Ubuntu and ROS Melodic installations. 1.1 Ubuntu Installation Ubuntu is a complete Linux operating system, which will serve as the primary platform for ROS . Currently, the d.ASH SDK only supports Linux Ubuntu 18.04 LTS for development and simulation from your workstation. Ubuntu Installation via Bootable USB If you would like to install Ubuntu via a bootable USB, you can do so for both Windows and MacOS . Ubuntu Installation via Virtual Machine If you would like to install Ubuntu via a virtual machine, you can do so using VirtualBox to kickstart your installation process. Once Ubuntu is installed, check that your version of Ubuntu has the release code 18.04 . Open the terminal and type the command: $ lsb_release - a No LSB modules are available . Distributor ID : Ubuntu Description : Ubuntu 18.04.5 LTS Release : 18.04 Codename : bionic 1.2 ROS Installation ROS (Robot Operating System) is a open-source framework that helps researchers and developers build and reuse code between robotics applications. Currently, the d.ASH SDK only supports ROS Melodic for development and simulation from your workstation. Use Ubuntu to install ROS onto your computer system. Once ROS has been installed on your Linux system, check that your version of ROS is melodic . Open the terminal and type the command: $ rosversion -d melodic","title":"1.0 Installing Desktop Dependencies"},{"location":"setup/desktop-dep/#installing-dependencies-on-the-desktop","text":"While most of the d.ASH SDK build is hermetic, some system dependencies on the Desktop are required - Linux Ubuntu 18.04 LTS and ROS Melodic . This section of the d.ASH SDK documentation provides details for both Ubuntu and ROS Melodic installations.","title":"Installing Dependencies on the Desktop"},{"location":"setup/desktop-dep/#11-ubuntu-installation","text":"Ubuntu is a complete Linux operating system, which will serve as the primary platform for ROS . Currently, the d.ASH SDK only supports Linux Ubuntu 18.04 LTS for development and simulation from your workstation. Ubuntu Installation via Bootable USB If you would like to install Ubuntu via a bootable USB, you can do so for both Windows and MacOS . Ubuntu Installation via Virtual Machine If you would like to install Ubuntu via a virtual machine, you can do so using VirtualBox to kickstart your installation process. Once Ubuntu is installed, check that your version of Ubuntu has the release code 18.04 . Open the terminal and type the command: $ lsb_release - a No LSB modules are available . Distributor ID : Ubuntu Description : Ubuntu 18.04.5 LTS Release : 18.04 Codename : bionic","title":"1.1 Ubuntu Installation"},{"location":"setup/desktop-dep/#12-ros-installation","text":"ROS (Robot Operating System) is a open-source framework that helps researchers and developers build and reuse code between robotics applications. Currently, the d.ASH SDK only supports ROS Melodic for development and simulation from your workstation. Use Ubuntu to install ROS onto your computer system. Once ROS has been installed on your Linux system, check that your version of ROS is melodic . Open the terminal and type the command: $ rosversion -d melodic","title":"1.2 ROS Installation"},{"location":"setup/payload-reg/","text":"Payload Registration Before running the d.ASH SDK, please make sure your all your credentials have been set up correctly. This means using the right username and the right password. This section of the d.ASH SDK documentation provides details about setting up credentials for the d.ASH SDK. Information in this section includes the d.ASH server and the ROS driver credentials setup. 2.1 d.ASH Server Credentials To set up the local credentials for the d.ASH server, you will need to by run the file: setServerPassNative . Run the following command replacing <username> with your chosen username and <password> with your chosen password. $ ./setServerPassNative -u <username> -p <password> For example, if your username is user123 and your password is ilovedASH , your commands would look like this: $ ./ setServerPassNative - u user123 - p ilovedASH Username in Robot Configuration Please ensure that the username for the d.ASH server is the same as the one defined in the robot configuration file - robotConfig.json . For example, you would set \"username\" : \"<username>\" . 2.2 ROS Driver Credentials To set up the local credentials for the ROS driver, you will need to by run the file: setAutonomyCred . Run the following command replacing <username> with your chosen username and <password> with your chosen password. $ cd ./ setAutoCred / build $ ./ setAutonomyCred - u < username > - p < password > For example, if your username is user123 and your password is ilovedASH , your commands would look like this: $ cd ./ setAutoCred / build $ ./ setAutonomyCred - u user123 - p ilovedASH","title":"2.0 Payload Registration"},{"location":"setup/payload-reg/#payload-registration","text":"Before running the d.ASH SDK, please make sure your all your credentials have been set up correctly. This means using the right username and the right password. This section of the d.ASH SDK documentation provides details about setting up credentials for the d.ASH SDK. Information in this section includes the d.ASH server and the ROS driver credentials setup.","title":"Payload Registration"},{"location":"setup/payload-reg/#21-dash-server-credentials","text":"To set up the local credentials for the d.ASH server, you will need to by run the file: setServerPassNative . Run the following command replacing <username> with your chosen username and <password> with your chosen password. $ ./setServerPassNative -u <username> -p <password> For example, if your username is user123 and your password is ilovedASH , your commands would look like this: $ ./ setServerPassNative - u user123 - p ilovedASH Username in Robot Configuration Please ensure that the username for the d.ASH server is the same as the one defined in the robot configuration file - robotConfig.json . For example, you would set \"username\" : \"<username>\" .","title":"2.1 d.ASH Server Credentials"},{"location":"setup/payload-reg/#22-ros-driver-credentials","text":"To set up the local credentials for the ROS driver, you will need to by run the file: setAutonomyCred . Run the following command replacing <username> with your chosen username and <password> with your chosen password. $ cd ./ setAutoCred / build $ ./ setAutonomyCred - u < username > - p < password > For example, if your username is user123 and your password is ilovedASH , your commands would look like this: $ cd ./ setAutoCred / build $ ./ setAutonomyCred - u user123 - p ilovedASH","title":"2.2 ROS Driver Credentials"},{"location":"setup/ros-driver/","text":"ROS Driver As mentioned, the ROS driver is a ROS node handles computational calls and sends control commands to the d.ASH server. It acts as an intermediate layer for ROS messages to be communicated with d.ASH server and unreal-clients through gRPC . 4.1 Update External Libraries First, let's update the external libs, more specifically the grpc_layer , by executing the following commands: $ git submodule update --init --recursive $ git submodule update --remote --merge 4.2 Prerequisite Now, we need to use vcpkg to install following packages to set up the ROS Driver: $ cd ~/vcpkg $ ./vcpkg install grpc:x64-linux $ ./vcpkg install nlohmann-json:x64-linux $ ./vcpkg install libsodium:x64-linux $ ./vcpkg install msgpack:x64-linux $ ./vcpkg install eigen3:x64-linux $ ./vcpkg install opencv[world]:x64-linux $ ./vcpkg install spdlog:x64-linux $ ./vcpkg install pcl:x64-linux Then, using apt-get to install following packages to set up the ROS Driver: $ sudo apt install ros-melodic-hector-trajectory-server ros-melodic-realsense2-camera ros-melodic-velodyne ros-melodic-joy ros-melodic-octomap ros-melodic-dynamic-edt-3d ros-melodic-tf2 ros-melodic-serial* libgoogle-glog-dev git libssl-dev libusb-1.0-0-dev pkg-config libgtk-3-dev libglfw3-dev libgl1-mesa-dev libglu1-mesa-dev $ sudo add-apt-repository ppa:joseluisblancoc/gtsam-develop $ sudo apt update $ sudo apt install libgtsam-dev $ sudo apt-key adv --keyserver keys.gnupg.net --recv-key 6F3EFCDE $ sudo apt update $ sudo apt install librealsense2* $ sudo apt install libudev-dev $ sudo apt-get install libsecret-1-dev 4.3 Configuration Now, we need to place the pyConfig.json into the folder ~/.data . Similarly, make sure security files are stored in the folder ~/.data/security/ . To build the ROS Driver, execute the following commands: $ mkdir build $ cd build $ cmake -DBUILD_SHARED_LIBS=On .. -DCMAKE_TOOLCHAIN_FILE=/home/spot/vcpkg/scripts/buildsystems/vcpkg.cmake -DCMAKE_BUILD_TYPE=Release (change path accordingly) $ make -j12 4.4 Running the Driver By default, token authentication is enabled. To disable it, add auth: false to the pyConfig.json . To run without token authentication: $ ./ros_msg_interface <!path_to_pyConfig.json> Otherwise, if token authentication is enabled, run $ ./ros_msg_interface <!path_to_pyConfig.json> <!TOKEN_HERE> 4.5 Building the d.ASH Server on Linux Now, you will need to compile the py_realsense_node C++ library by executing the following: $ cmake -DBUILD_SHARED_LIBS=On .. -DCMAKE_TOOLCHAIN_FILE=/home/spot/vcpkg/scripts/buildsystems/vcpkg.cmake -DCMAKE_BUILD_TYPE=RELEASE $ make sure add set(CMAKE_CXX_STANDARD 14) in CMakelists $ make Then, you will need to compile the py_server C++ library by executing the following: $ cmake -DBUILD_SHARED_LIBS=On .. -DCMAKE_TOOLCHAIN_FILE=/home/spot/vcpkg/scripts/buildsystems/vcpkg.cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo $ make sure add set(CMAKE_CXX_STANDARD 14) in CMakelists $ make Finally, add the python path correctly by ensuring: In robotHAL.py, ensure you are importing the compiled py_server C++ library. In realSenseCameras.py, ensure you have compiled the py_realsense_node C++ library.","title":"4.0 Setting up ROS Driver"},{"location":"setup/ros-driver/#ros-driver","text":"As mentioned, the ROS driver is a ROS node handles computational calls and sends control commands to the d.ASH server. It acts as an intermediate layer for ROS messages to be communicated with d.ASH server and unreal-clients through gRPC .","title":"ROS Driver"},{"location":"setup/ros-driver/#41-update-external-libraries","text":"First, let's update the external libs, more specifically the grpc_layer , by executing the following commands: $ git submodule update --init --recursive $ git submodule update --remote --merge","title":"4.1 Update External Libraries"},{"location":"setup/ros-driver/#42-prerequisite","text":"Now, we need to use vcpkg to install following packages to set up the ROS Driver: $ cd ~/vcpkg $ ./vcpkg install grpc:x64-linux $ ./vcpkg install nlohmann-json:x64-linux $ ./vcpkg install libsodium:x64-linux $ ./vcpkg install msgpack:x64-linux $ ./vcpkg install eigen3:x64-linux $ ./vcpkg install opencv[world]:x64-linux $ ./vcpkg install spdlog:x64-linux $ ./vcpkg install pcl:x64-linux Then, using apt-get to install following packages to set up the ROS Driver: $ sudo apt install ros-melodic-hector-trajectory-server ros-melodic-realsense2-camera ros-melodic-velodyne ros-melodic-joy ros-melodic-octomap ros-melodic-dynamic-edt-3d ros-melodic-tf2 ros-melodic-serial* libgoogle-glog-dev git libssl-dev libusb-1.0-0-dev pkg-config libgtk-3-dev libglfw3-dev libgl1-mesa-dev libglu1-mesa-dev $ sudo add-apt-repository ppa:joseluisblancoc/gtsam-develop $ sudo apt update $ sudo apt install libgtsam-dev $ sudo apt-key adv --keyserver keys.gnupg.net --recv-key 6F3EFCDE $ sudo apt update $ sudo apt install librealsense2* $ sudo apt install libudev-dev $ sudo apt-get install libsecret-1-dev","title":"4.2 Prerequisite"},{"location":"setup/ros-driver/#43-configuration","text":"Now, we need to place the pyConfig.json into the folder ~/.data . Similarly, make sure security files are stored in the folder ~/.data/security/ . To build the ROS Driver, execute the following commands: $ mkdir build $ cd build $ cmake -DBUILD_SHARED_LIBS=On .. -DCMAKE_TOOLCHAIN_FILE=/home/spot/vcpkg/scripts/buildsystems/vcpkg.cmake -DCMAKE_BUILD_TYPE=Release (change path accordingly) $ make -j12","title":"4.3 Configuration"},{"location":"setup/ros-driver/#44-running-the-driver","text":"By default, token authentication is enabled. To disable it, add auth: false to the pyConfig.json . To run without token authentication: $ ./ros_msg_interface <!path_to_pyConfig.json> Otherwise, if token authentication is enabled, run $ ./ros_msg_interface <!path_to_pyConfig.json> <!TOKEN_HERE>","title":"4.4 Running the Driver"},{"location":"setup/ros-driver/#45-building-the-dash-server-on-linux","text":"Now, you will need to compile the py_realsense_node C++ library by executing the following: $ cmake -DBUILD_SHARED_LIBS=On .. -DCMAKE_TOOLCHAIN_FILE=/home/spot/vcpkg/scripts/buildsystems/vcpkg.cmake -DCMAKE_BUILD_TYPE=RELEASE $ make sure add set(CMAKE_CXX_STANDARD 14) in CMakelists $ make Then, you will need to compile the py_server C++ library by executing the following: $ cmake -DBUILD_SHARED_LIBS=On .. -DCMAKE_TOOLCHAIN_FILE=/home/spot/vcpkg/scripts/buildsystems/vcpkg.cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo $ make sure add set(CMAKE_CXX_STANDARD 14) in CMakelists $ make Finally, add the python path correctly by ensuring: In robotHAL.py, ensure you are importing the compiled py_server C++ library. In realSenseCameras.py, ensure you have compiled the py_realsense_node C++ library.","title":"4.5 Building the d.ASH Server on Linux"}]}